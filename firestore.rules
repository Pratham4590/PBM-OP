/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a role-based model for other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /paperTypes/{paperTypeId}: Stores paper type master data. Access is unrestricted.
 * - /itemTypes/{itemTypeId}: Stores item type master data. Access is unrestricted.
 * - /stock/{stockId}: Stores stock information; only accessible and modifiable by authenticated users.
 * - /programs/{programId}: Stores program information, publicly readable and owner-modifiable.
 * - /reels/{reelRulingId}: Stores reel ruling entries, publicly readable and owner-modifiable.
 * - /reports/{reportId}: Stores generated reports, publicly readable and owner-modifiable.
 *
 * Key Security Decisions:
 * - Users can only access their own user profile data.
 * - Listing of users is disallowed.
 * - Master data collections (paperTypes, itemTypes) are publicly readable.
 * - Stock information is readable to all.
 * - Program, ReelRuling, and Report writes are restricted to authenticated users and must have a valid ownership field.
 *
 * Denormalization for Authorization:
 * - The ruleset assumes that any collaborative models will denormalize "members" data into a map on the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can only read, update, or delete their own profile.
     * @deny (list) - Listing all users is disallowed.
     * @deny (create) - A user cannot create a profile for another user (userId mismatch).
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      // Allow the user to create their own profile, enforcing that the ID matches their auth UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow reading a user's own profile.
      allow get: if isOwner(userId);

      // Disallow listing all users.
      allow list: if false;

      // Allow updating a user's own profile, but ensure the user ID cannot be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deleting a user's own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Anyone can read paper type data.
     * @deny (create, update, delete) - No one can create, update, or delete paper type data.
     * @principle Public read-only access for master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Anyone can read item type data.
     * @deny (create, update, delete) - No one can create, update, or delete item type data.
     * @principle Public read-only access for master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock information.
     * @path /stock/{stockId}
     * @allow (get, list) - Anyone can read stock information.
     * @deny (create, update, delete) - No one can create, update, or delete stock information.
     * @principle Public read-only access.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to program information.
     * @path /programs/{programId}
     * @allow (get, list) - Anyone can read program information.
     * @allow (create) - Only authenticated users can create program entries, ensuring the creatorId matches their UID.
     * @allow (update, delete) - Only the owner (creator) of the program can update or delete it, if it exists.
     * @deny (create) - Rejects creation if the creatorId doesn't match the user's UID.
     * @deny (update, delete) - Rejects updates/deletions if the program doesn't exist or the user isn't the owner.
     * @principle Public read, owner-only writes with creator validation.
     */
    match /programs/{programId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource.data != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn();

      allow update: if isSignedIn() && isExistingOwner(request.resource.data.ownerId);

      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Anyone can read reel ruling entries.
     * @allow (create) - Only authenticated users can create reel ruling entries, ensuring the creatorId matches their UID.
     * @allow (update, delete) - Only the owner (creator) of the reel ruling can update or delete it, if it exists.
     * @deny (create) - Rejects creation if the creatorId doesn't match the user's UID.
     * @deny (update, delete) - Rejects updates/deletions if the reel ruling doesn't exist or the user isn't the owner.
     * @principle Public read, owner-only writes with creator validation.
     */
    match /reels/{reelRulingId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource.data != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn();

      allow update: if isSignedIn() && isExistingOwner(request.resource.data.ownerId);

      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) - Anyone can read generated reports.
     * @allow (create) - Only authenticated users can create report entries, ensuring the creatorId matches their UID.
     * @allow (update, delete) - Only the owner (creator) of the report can update or delete it, if it exists.
     * @deny (create) - Rejects creation if the creatorId doesn't match the user's UID.
     * @deny (update, delete) - Rejects updates/deletions if the report doesn't exist or the user isn't the owner.
     * @principle Public read, owner-only writes with creator validation.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource.data != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn();

      allow update: if isSignedIn() && isExistingOwner(request.resource.data.ownerId);

      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }
  }
}