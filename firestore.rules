/**
 * @file Firestore Security Rules for Notebook Manufacturing App
 * @corePhilosophy This ruleset enforces a role-based access control model with ownership for user data. Master data can only be modified by admin users, while other data is governed by a combination of ownership and denormalized authorization data.
 * @dataStructure Data is organized into top-level collections for master data (paperTypes, itemTypes), user profiles (users/{userId}), and operational data (stock, programs, reels, reports). User-specific data is stored under /users/{userId}.
 * @keySecurityDecisions
 *   - User listing is disallowed to protect privacy.
 *   - Master data (paperTypes, itemTypes) can only be modified by admins.
 *   - The ruleset defaults to strict owner-only access where relationships are ambiguous.
 *   - No data validation is implemented beyond authorization checks in this prototyping phase.
 *   - All write operations must be authenticated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the authenticated user to read/write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create /users/user_abc
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /users/user_abc
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admins to read and write paper types.
     * @path /paperTypes/{paperTypeId}
     * @allow (create, get, update, delete, list) - Admin user can create, get, update, delete and list /paperTypes/paper_type_1
     * @deny (create, get, update, delete, list) - Non-admin user cannot create, get, update, delete and list /paperTypes/paper_type_1
     * @principle Restricts master data modification to admins.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and write item types.
     * @path /itemTypes/{itemTypeId}
     * @allow (create, get, update, delete, list) - Admin user can create, get, update, delete and list /itemTypes/item_type_1
     * @deny (create, get, update, delete, list) - Non-admin user cannot create, get, update, delete and list /itemTypes/item_type_1
     * @principle Restricts master data modification to admins.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and write stock information.
     * @path /stock/{stockId}
     * @allow (create, get, update, delete, list) - Admin user can create, get, update, delete and list /stock/stock_1
     * @deny (create, get, update, delete, list) - Non-admin user cannot create, get, update, delete and list /stock/stock_1
     * @principle Restricts stock data modification to admins.
     */
    match /stock/{stockId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access to program information.  If collaboration on programs is implemented,
     *              access is granted to members listed in the `members` map within the document.
     * @path /programs/{programId}
     * @allow (get, list) - Any authenticated user can read program data.
     * @allow (create) - Any authenticated user can create a new program.
     * @allow (update, delete) - Only the creator (owner) can update or delete the program.  If a `members` map exists, only someone with 'owner' role can update.
     * @deny (update, delete) - A user who is not the owner or does not have sufficient privileges cannot update or delete the program.
     * @principle Supports owner-only writes with potential for collaborative access through a `members` map.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isProgramOwner(programId);
      allow delete: if isProgramOwner(programId);
    }

    /**
     * @description Allows access to reel ruling entries. If a program is associated with the reel ruling,
     *              access is controlled by the `members` map of the program. Otherwise, it defaults to owner-only access.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Any authenticated user can read reel ruling data.
     * @allow (create) - Any authenticated user can create a new reel ruling entry.
     * @allow (update, delete) - Only the owner (creator) can update or delete the reel ruling.  If associated with a program, program owners can update/delete.
     * @deny (update, delete) - A user who is not the owner or program owner cannot update or delete the reel ruling.
     * @principle Supports owner-only writes with potential for collaborative access inherited from associated programs.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isReelRulingOwner(reelRulingId);
      allow delete: if isReelRulingOwner(reelRulingId);
    }

    /**
     * @description Allows access to generated reports.
     * @path /reports/{reportId}
     * @allow get, list: if true;
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Reports are read-only and can only be created, updated, and deleted by admins.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ------ Helper Functions ------

    /**
     * @description Checks if the user is signed in.
     * @return True if request.auth is not null, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return True if the user's role is 'admin', false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user is the owner of the document, based on the provided userId.
     * @param userId The user ID to compare against request.auth.uid.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the program document.
     *              If collaboration features are implemented, and the `members` map is present,
     *              the user must have the 'owner' role in the map to be considered the owner.
     * @param programId The ID of the program document.
     * @return True if the user is the owner, false otherwise.
     */
    function isProgramOwner(programId) {
      return isSignedIn() && (
        get(/databases/$(database)/documents/programs/$(programId)).data.members[request.auth.uid] == 'owner'
      );
    }

        /**
         * @description Checks if the user is the owner of the reel ruling document or associated program.
         * If the reel ruling is associated with a program, checks if the user is the owner of the program.
         * Otherwise, checks if the user is the owner of the reel ruling document.
         * @param reelRulingId The ID of the reel ruling document.
         * @return True if the user is the owner, false otherwise.
         */
      function isReelRulingOwner(reelRulingId) {
        let reelRuling = get(/databases/$(database)/documents/reels/$(reelRulingId)).data;
        return isSignedIn() && (reelRuling.programId != null
            ? get(/databases/$(database)/documents/programs/$(reelRuling.programId)).data.members[request.auth.uid] == 'owner'
            : reelRuling.createdBy == request.auth.uid);
      }

    /**
     * @description Checks if the program document exists.
     * @param programId The ID of the program document.
     * @return True if the document exists, false otherwise.
     */
    function isExistingProgram(programId) {
      return exists(/databases/$(database)/documents/programs/$(programId));
    }

      /**
       * @description Checks if the report document exists.
       * @param reportId The ID of the report document.
       * @return True if the document exists, false otherwise.
       */
      function isExistingReport(reportId) {
        return exists(/databases/$(database)/documents/reports/$(reportId));
      }

        /**
         * @description Checks if the reel ruling document exists.
         * @param reelRulingId The ID of the reel ruling document.
         * @return True if the document exists, false otherwise.
         */
        function isExistingReelRuling(reelRulingId) {
          return exists(/databases/$(database)/documents/reels/$(reelRulingId));
        }

    /**
     * @description Checks if the user is the owner of the document and if the document exists.
     * @param userId The user ID to compare against request.auth.uid.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingUser(userId) {
        return exists(/databases/$(database)/documents/users/$(userId));
    }

    function isExistingPaperType(paperTypeId) {
        return exists(/databases/$(database)/documents/paperTypes/$(paperTypeId));
    }

    function isExistingItemType(itemTypeId) {
        return exists(/databases/$(database)/documents/itemTypes/$(itemTypeId));
    }

    function isExistingStock(stockId) {
        return exists(/databases/$(database)/documents/stock/$(stockId));
    }

  }
}