/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control. User data is strictly controlled by the individual user, while operational data (stock, programs, reel rulings, reports) may have role-based restrictions.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Each user can only access their own profile.
 * - /paperTypes/{paperTypeId}: Stores master data about paper types. Access is public.
 * - /itemTypes/{itemTypeId}: Stores master data about item types. Access is public.
 * - /stock/{stockId}: Stores stock information. Access is restricted to admin users only.
 * - /programs/{programId}: Stores program information.
 * - /reels/{reelRulingId}: Stores reel ruling entries.
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents.
 * - Listing of users is disallowed.
 * - Admin role can create, read, update, and delete all stock documents.
 * - All other collections are publicly readable, but require authentication for writes, with ownership or role validation enforced.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `users/{userId}` document, eliminating the need for additional reads.
 * - If collaborative features are added for Programs or ReelRulings, a `members` map should be denormalized into each document to avoid `get()` calls. This map would store user IDs and their roles for that specific document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own user document if the userId matches their auth UID.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create, update, delete) -  Any other user attempting to create, update, or delete this user document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own document if the userId matches their authentication uid.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get, update, and delete their own document if the userId matches their authentication uid and the document exists.
      allow get, update, delete: if isExistingOwner(userId);

      // Listing users is not allowed.
      allow list: if false;

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Controls access to paper type documents.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Anyone can read paper type documents.
     * @deny (create, update, delete) - No one can create, update, or delete paper type documents.
     * @principle Allows public read access to paper type documents.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type documents.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Anyone can read item type documents.
     * @deny (create, update, delete) - No one can create, update, or delete item type documents.
     * @principle Allows public read access to item type documents.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock documents.
     * @path /stock/{stockId}
     * @allow (get, list) - Anyone can read stock documents.
     * @allow (create, update, delete) - Only admin users can create, update, or delete stock documents.
     * @principle Restricts write access to stock data to admin users.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();

      // Helper function to check if the user has the admin role.
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }
    }

    /**
     * @description Controls access to program documents.
     * @path /programs/{programId}
     * @allow (get, list) - Anyone can read program documents.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete program documents.  If members functionality is enabled on a program, only program members can update or delete.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null; // TODO: Add members validation once the schema is updated with a members field.

      function isSignedIn() {
        return request.auth != null;
      }
    }

    /**
     * @description Controls access to reel ruling documents.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Anyone can read reel ruling documents.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete reel ruling documents. If members functionality is enabled on a reel ruling document, only program members can update or delete.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null; // TODO: Add members validation once the schema is updated with a members field.

      function isSignedIn() {
        return request.auth != null;
      }
    }

    /**
     * @description Controls access to report documents.
     * @path /reports/{reportId}
     * @allow (get, list) - Anyone can read report documents.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete report documents.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();

      function isSignedIn() {
        return request.auth != null;
      }
    }
  }
}