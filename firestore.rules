/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for a notebook manufacturing app.
 *
 * Core Philosophy:
 *   Access is strictly controlled based on the user's role (Admin, Member, Operator). Admins have full access to most collections,
 *   while Members and Operators have more restricted permissions. The rules prioritize authorization independence and structural segregation
 *   to ensure efficient and secure data access.
 *
 * Data Structure:
 *   - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 *   - /paperTypes/{paperTypeId}: Stores master data for paper types.
 *   - /itemTypes/{itemTypeId}: Stores master data for item types.
 *   - /stock/{stockId}: Stores stock information, only modifiable by admins.
 *   - /programs/{programId}: Stores program information, potentially with a 'members' map for collaborative access.
 *   - /reels/{reelRulingId}: Stores reel ruling entries, potentially with a 'members' map for collaborative access based on program.
 *   - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 *   - Only admins can create, update, or delete stock entries.
 *   - Listing all documents in the `stock` collection is disallowed to prevent unauthorized data exposure.
 *   - User documents are protected by owner-only access.
 *   - Data validation is minimized to accelerate prototyping, focusing on authorization-critical fields.
 *
 * Denormalization for Authorization:
 *   - User roles are stored directly in the `users/{userId}` document, eliminating the need for extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user is a member.
     */
    function isMember() {
      return isSignedIn() && request.auth.token.role == 'Member';
    }

    /**
     * @description Checks if the user is an operator.
     */
    function isOperator() {
      return isSignedIn() && request.auth.token.role == 'Operator';
    }

    /**
     * @description Checks if the user is an existing owner, verifying both ownership and document existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rules for user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     */
    match /users/{userId} {
      // Read rules: get, list
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      // Write rules: create, update, delete
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Rules for paper type master data. Public read, admin-only write.
     * @path /paperTypes/{paperTypeId}
     */
    match /paperTypes/{paperTypeId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for item type master data. Public read, admin-only write.
     * @path /itemTypes/{itemTypeId}
     */
    match /itemTypes/{itemTypeId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for stock data. Admin-only access.
     * @path /stock/{stockId}
     */
    match /stock/{stockId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for program data.
     * @path /programs/{programId}
     */
    match /programs/{programId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for reel ruling data.
     * @path /reels/{reelRulingId}
     */
    match /reels/{reelRulingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for report data.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}