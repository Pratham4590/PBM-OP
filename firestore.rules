rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user ownership for user profiles.  Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their profile if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile if authenticated as 'user456'.
     * @deny (get) User with ID 'user123' cannot read a profile if authenticated as 'user456'.
     * @deny (update) User with ID 'user123' cannot update a profile if authenticated as 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete a profile if authenticated as 'user456'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to paper type master data. Only admins can create, update, or delete paper types.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Any user can read a paper type.
     * @allow (list) Any user can list paper types.
     * @deny (create) Non-admin user cannot create a paper type.
     * @deny (update) Non-admin user cannot update a paper type.
     * @deny (delete) Non-admin user cannot delete a paper type.
     * @principle Public read access with restricted write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to item type master data. Only admins can create, update, or delete item types.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Any user can read an item type.
     * @allow (list) Any user can list item types.
     * @deny (create) Non-admin user cannot create an item type.
     * @deny (update) Non-admin user cannot update an item type.
     * @deny (delete) Non-admin user cannot delete an item type.
     * @principle Public read access with restricted write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to stock information to admin users only.
     * @path /stock/{stockId}
     * @deny (get) Non-admin user cannot read stock information.
     * @deny (list) Non-admin user cannot list stock information.
     * @deny (create) Non-admin user cannot create stock information.
     * @deny (update) Non-admin user cannot update stock information.
     * @deny (delete) Non-admin user cannot delete stock information.
     * @principle Strict admin-only access.
     */
    match /stock/{stockId} {
      allow get: if isAdmin();
      allow list: if false; // Listing should generally be disabled for sensitive data
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to program information. Only admins can create, update, or delete programs.
     * @path /programs/{programId}
     * @allow (get) Any user can read a program.
     * @allow (list) Any user can list programs.
     * @deny (create) Non-admin user cannot create a program.
     * @deny (update) Non-admin user cannot update a program.
     * @deny (delete) Non-admin user cannot delete a program.
     * @principle Public read access with restricted write access.
     */
    match /programs/{programId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to reel ruling entries. Only admins can create, update, or delete reel rulings.
     * @path /reels/{reelRulingId}
     * @allow (get) Any user can read a reel ruling entry.
     * @allow (list) Any user can list reel ruling entries.
     * @deny (create) Non-admin user cannot create a reel ruling entry.
     * @deny (update) Non-admin user cannot update a reel ruling entry.
     * @deny (delete) Non-admin user cannot delete a reel ruling entry.
     * @principle Public read access with restricted write access.
     */
    match /reels/{reelRulingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to reports. Only admins can create, update, or delete reports.
     * @path /reports/{reportId}
     * @allow (get) Any user can read a report.
     * @allow (list) Any user can list reports.
     * @deny (create) Non-admin user cannot create a report.
     * @deny (update) Non-admin user cannot update a report.
     * @deny (delete) Non-admin user cannot delete a report.
     * @principle Public read access with restricted write access.
     */
    match /reports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Centralized function to check for admin role.  For prototyping, all authenticated users are considered admins.
    function isAdmin() {
        return request.auth != null; //  All authenticated users are admins
        //return request.auth.token.email == "admin@example.com"; // For testing with the emulator
    }
  }
}