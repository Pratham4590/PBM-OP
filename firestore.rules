rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owning user to read and write their data.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId.
     * @allow (get, update, delete) - If the user's auth UID matches the userId.
     * @deny (create) - If the user's auth UID does not match the userId.
     * @deny (get, update, delete) - If the user's auth UID does not match the userId.
     * @principle Enforces document ownership for all read and write operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId); //Enforce immutability
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures paper type master data. Assumed to be publicly readable, but write access is restricted.
     * @path /masterData/paperTypes/{paperTypeId}
     * @allow (get, list) - Anyone can read paper type data.
     * @deny (create, update, delete) - No one can create, update, or delete paper type data without authentication.
     * @principle Public read access with restricted write access for master data.
     */
    match /masterData/paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation if needed.
    }

    /**
     * @description Secures item type master data. Assumed to be publicly readable, but write access is restricted.
     * @path /masterData/itemTypes/{itemTypeId}
     * @allow (get, list) - Anyone can read item type data.
     * @deny (create, update, delete) - No one can create, update, or delete item type data without authentication.
     * @principle Public read access with restricted write access for master data.
     */
    match /masterData/itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role validation if needed.
    }

    /**
     * @description Secures stock information, allowing only admin users to read and write data.
     * @path /stock/{stockId}
     * @allow (create, update, delete) - If the user is an admin (TODO: Implement admin role check).
     * @deny (get, list) - No one can read stock data without authentication.
     * @principle Restricts access to stock data to admin users.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return false; // TODO: Implement admin role check (e.g., by querying the user's document).
      }

      allow get, list: if isAdmin(); //TODO: only admins should be able to list
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures program information.
     * @path /programs/{programId}
     * @allow (create, update, delete) - If the user has write access (TODO: Implement write access check).
     * @deny (get, list) - No one can read stock data without authentication.
     * @principle Restricts access to program data.
     */
    match /programs/{programId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn(); //TODO: Should it be listed by any user?
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (create, update, delete) - If the user has write access (TODO: Implement write access check).
     * @deny (get, list) - No one can read stock data without authentication.
     * @principle Restricts access to reel ruling data.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn(); //TODO: Should it be listed by any user?
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures generated reports.
     * @path /reports/{reportId}
     * @allow (create, update, delete) - If the user has write access (TODO: Implement write access check).
     * @deny (get, list) - No one can read stock data without authentication.
     * @principle Restricts access to report data.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn(); //TODO: Should it be listed by any user?
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}