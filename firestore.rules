/**
 * @fileoverview Firestore Security Rules for the Notebook Manufacturing Management App.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control and user-ownership for data. Admins have full access,
 * members can create programs and view reports, and operators can create reel rulings.
 * Strict ownership is enforced for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves and admins.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types, accessible only by admins.
 * - /itemTypes/{itemTypeId}: Stores master data for item types, accessible only by admins.
 * - /stock/{stockId}: Stores stock information, accessible only by admins.
 * - /programs/{programId}: Stores program information, accessible to members and admins.
 * - /reels/{reelRulingId}: Stores reel ruling entries, accessible to operators and admins.
 * - /reports/{reportId}: Stores generated reports, accessible to members and admins.
 *
 * Key Security Decisions:
 * - Only admins can add/edit stock and master data.
 * - Members can create programs and view reports.
 * - Operators can only add reel rulings.
 * - User listing is disallowed.
 * - All writes are explicitly validated against user roles.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the /users/{userId} document, avoiding extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested ID.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user is a member.
     */
    function isMember() {
      return isSignedIn() && request.auth.token.role == 'Member';
    }

    /**
     * @description Checks if the user is an operator.
     */
    function isOperator() {
      return isSignedIn() && request.auth.token.role == 'Operator';
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - Allow user to create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Allow only the user and admins to access their own profile.
     * @deny (list) - Prevent listing all users.
     * @deny (create) - Deny create if the user is not creating their own profile.
     * @principle Enforces user-ownership and role-based access for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rule for paper types (master data).
     * @path /paperTypes/{paperTypeId}
     * @allow (create, get, update, delete) - Allow only admins to manage paper types.
     * @deny (list) - Prevent listing all paper types to non-admins
     * @principle Restricts paper type management to administrators.
     */
    match /paperTypes/{paperTypeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for item types (master data).
     * @path /itemTypes/{itemTypeId}
     * @allow (create, get, update, delete) - Allow only admins to manage item types.
     * @deny (list) - Prevent listing all item types to non-admins
     * @principle Restricts item type management to administrators.
     */
    match /itemTypes/{itemTypeId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for stock information.
     * @path /stock/{stockId}
     * @allow (create, get, update, delete) - Allow only admins to manage stock.
     * @deny (list) - Prevent listing all stocks to non-admins
     * @principle Restricts stock management to administrators.
     */
    match /stock/{stockId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for program information.
     * @path /programs/{programId}
     * @allow (create) - Allow members and admins to create programs.
     * @allow (get, update, delete) - Allow admins to manage programs.
     * @deny (list) - Prevent listing all programs to non-admins or non-members
     * @principle Restricts program creation to members and management to administrators.
     */
    match /programs/{programId} {
      allow get: if isMember() || isAdmin();
      allow list: if isMember() || isAdmin();
      allow create: if isMember() || isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (create) - Allow operators and admins to create reel rulings.
     * @allow (get, update, delete) - Allow admins to manage reel rulings.
     * @deny (list) - Prevent listing all reel rulings to non-admins or non-operators.
     * @principle Restricts reel ruling creation to operators and management to administrators.
     */
    match /reels/{reelRulingId} {
      allow get: if isOperator() || isAdmin();
      allow list: if isOperator() || isAdmin();
      allow create: if isOperator() || isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for generated reports.
     * @path /reports/{reportId}
     * @allow (get) - Allow members and admins to view reports.
     * @allow (create, update, delete) - Allow only admins to manage reports.
     * @deny (list) - Prevent listing all reports to non-admins or non-members.
     * @principle Restricts report viewing to members and management to administrators.
     */
    match /reports/{reportId} {
      allow get: if isMember() || isAdmin();
      allow list: if isMember() || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}