/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with owner-based restrictions for user data.
 * It emphasizes authorization independence by storing access control information directly within documents,
 * avoiding costly and complex `get()` calls.  Rules are designed to ensure that queries are secure
 * and do not act as filters.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types, accessible to all authenticated users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types, accessible to all authenticated users.
 * - /stock/{stockId}: Stores stock information, only accessible to Admin users.
 * - /programs/{programId}: Stores program information. Read/Write access controlled by members map (if collaboration feature is extended).
 * - /reels/{reelRulingId}: Stores reel ruling entries. Read/Write access controlled by program members (if collaboration feature is extended).
 * - /reports/{reportId}: Stores generated reports, accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; listing all users is disallowed.
 * - All write operations are explicitly authorized to prevent accidental open access.
 * - Data validation is relaxed in this prototyping phase, focusing on ownership and relational integrity checks.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `/users/{userId}` document.
 * - Programs and ReelRulings denormalize members map to avoid needing `get()` calls in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.  Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to paper type master data. All authenticated users can read, only admins can write.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any authenticated user can read paper type data.
     * @deny (create, update, delete) Only admins can create, update, or delete paper type data.
     * @principle Allows public read access with restricted write access for master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if hasRole(['Admin']);
    }

    /**
     * @description Controls access to item type master data. All authenticated users can read, only admins can write.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any authenticated user can read item type data.
     * @deny (create, update, delete) Only admins can create, update, or delete item type data.
     * @principle Allows public read access with restricted write access for master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if hasRole(['Admin']);
    }

    /**
     * @description Controls access to stock data. Only admin users can read or write.
     * @path /stock/{stockId}
     * @allow (get, list) Only admins can read stock data.
     * @deny (create, update, delete) Only admins can create, update, or delete stock data.
     * @principle Restricts stock data access to admin users.
     */
    match /stock/{stockId} {
      allow get, list: if hasRole(['Admin']);
      allow create, update, delete: if hasRole(['Admin']);
    }

    /**
     * @description Controls access to program data.
     * @path /programs/{programId}
     * @allow (get, list) Any authenticated user can read program data.
     * @allow (create) Any authenticated user can create program data.
     * @deny (update, delete) Only members can update, or delete program data.
     * @principle Allows public read access with restricted write access for programs data.
     */
    match /programs/{programId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any authenticated user can read reel ruling data.
     * @allow (create) Any authenticated user can create reel ruling data.
     * @deny (update, delete) Only members can update, or delete reel ruling data.
     * @principle Allows public read access with restricted write access for reel ruling data.
     */
    match /reels/{reelRulingId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to report data. All authenticated users can read, only admins can write.
     * @path /reports/{reportId}
     * @allow (get, list) Any authenticated user can read report data.
     * @deny (create, update, delete) Only admins can create, update, or delete report data.
     * @principle Allows public read access with restricted write access for reports data.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if hasRole(['Admin']);
    }

    function isSignedIn() {
        return request.auth != null;
    }

    function hasRole(roles) {
        return request.auth != null && (request.auth.token.role in roles);
    }
  }
}