/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only the authenticated user can access their own profile.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types; accessible to all authenticated users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types; accessible to all authenticated users.
 * - /stock/{stockId}: Stores stock information; only accessible to admin users.
 * - /programs/{programId}: Stores program information; accessible to all authenticated users.
 * - /reels/{reelRulingId}: Stores reel ruling entries; accessible to all authenticated users.
 * - /reports/{reportId}: Stores generated reports; accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disabled for security.
 * - Read-only collections (paperTypes, itemTypes) are publicly readable.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Stock collection access is restricted to admin users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user123' cannot create a profile with a different ID ('user456').
     * @deny (get) User with UID 'user123' cannot read another user's profile ('user456').
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to paper types, with no write access.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Any user can read a paper type.
     * @allow (list) Any user can list paper types.
     * @deny (create) No user can create paper types through client-side rules (creation should be done via backend).
     * @deny (update) No user can update paper types through client-side rules (updates should be done via backend).
     * @deny (delete) No user can delete paper types through client-side rules (deletion should be done via backend).
     * @principle Provides public read access to read-only master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to item types, with no write access.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Any user can read an item type.
     * @allow (list) Any user can list item types.
     * @deny (create) No user can create item types through client-side rules (creation should be done via backend).
     * @deny (update) No user can update item types through client-side rules (updates should be done via backend).
     * @deny (delete) No user can delete item types through client-side rules (deletion should be done via backend).
     * @principle Provides public read access to read-only master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts stock access to admin users only.
     * @path /stock/{stockId}
     * @allow (get) Admin users can read stock information.
     * @allow (list) Admin users can list stock information.
     * @allow (create) Admin users can create stock information.
     * @allow (update) Admin users can update stock information.
     * @allow (delete) Admin users can delete stock information.
     * @deny (get) Non-admin users cannot read stock information.
     * @deny (list) Non-admin users cannot list stock information.
     * @principle Enforces role-based access control for sensitive data.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access to program information for authenticated users.
     * @path /programs/{programId}
     * @allow (get) Any authenticated user can read program information.
     * @allow (list) Any authenticated user can list program information.
     * @allow (create) Any authenticated user can create program information.
     * @allow (update) Any authenticated user can update program information.
     * @allow (delete) Any authenticated user can delete program information.
     * @principle Allows authenticated users to manage program information.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to reel ruling entries for authenticated users.
     * @path /reels/{reelRulingId}
     * @allow (get) Any authenticated user can read reel ruling entries.
     * @allow (list) Any authenticated user can list reel ruling entries.
     * @allow (create) Any authenticated user can create reel ruling entries.
     * @allow (update) Any authenticated user can update reel ruling entries.
     * @allow (delete) Any authenticated user can delete reel ruling entries.
     * @principle Allows authenticated users to manage reel ruling entries.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to generated reports for authenticated users.
     * @path /reports/{reportId}
     * @allow (get) Any authenticated user can read generated reports.
     * @allow (list) Any authenticated user can list generated reports.
     * @allow (create) Any authenticated user can create generated reports.
     * @allow (update) Any authenticated user can update generated reports.
     * @allow (delete) Any authenticated user can delete generated reports.
     * @principle Allows authenticated users to manage generated reports.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}