/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only the authenticated user can access their own profile.
 * - /paperTypes/{paperTypeId}: Stores paper type master data; publicly readable, write access restricted.
 * - /itemTypes/{itemTypeId}: Stores item type master data; publicly readable, write access restricted.
 * - /stock/{stockId}: Stores stock information; write access restricted.
 * - /programs/{programId}: Stores program information; publicly readable, write access restricted.
 * - /reels/{reelRulingId}: Stores reel ruling entries; publicly readable, write access restricted.
 * - /reports/{reportId}: Stores generated reports; publicly readable, write access restricted.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Master data (paperTypes, itemTypes) is publicly readable but write-protected.
 * - The rules prioritize secure write access, focusing on authorization and relational integrity. Data validation is relaxed for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - Roles are stored directly in the `users/{userId}` document to avoid extra reads during authorization.
 * - Collaborative data authorization should use denormalized `members` maps on `/programs/{programId}` and `/reels/{reelRulingId}` to avoid expensive `get()` calls.
 *
 * Structural Segregation:
 * - The application uses a flat collection structure with clear ownership and access control patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (list) - User listing is not allowed.
     * @deny (create, update, delete) - Other users cannot create, update, or delete user profiles.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - All users can read paper type data.
     * @deny (create, update, delete) - Only admins can create, update, or delete paper type data.
     * @principle Public read, restricted write for master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only check once roles are defined.
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - All users can read item type data.
     * @deny (create, update, delete) - Only admins can create, update, or delete item type data.
     * @principle Public read, restricted write for master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only check once roles are defined.
    }

    /**
     * @description Controls access to stock information.
     * @path /stock/{stockId}
     * @allow (get, list) - All users can read stock information.
     * @deny (create, update, delete) - Only admins can create, update, or delete stock information.
     * @principle Restricted write access for stock data.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only check once roles are defined.
    }

    /**
     * @description Controls access to program information.
     * @path /programs/{programId}
     * @allow (get, list) - All users can read program data.
     * @deny (create, update, delete) - Only admins can create, update, or delete program data.
     * @principle Public read, restricted write for program data.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only check once roles are defined.
    }

    /**
     * @description Controls access to reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - All users can read reel ruling entries.
     * @deny (create, update, delete) - Only admins can create, update, or delete reel ruling entries.
     * @principle Public read, restricted write for reel ruling data.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only check once roles are defined.
    }

    /**
     * @description Controls access to generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) - All users can read generated reports.
     * @deny (create, update, delete) - Only admins can create, update, or delete generated reports.
     * @principle Public read, restricted write for report data.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only check once roles are defined.
    }
  }
}