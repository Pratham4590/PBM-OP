/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control. User data under `/users/{userId}` is strictly controlled by the user. Access to other collections is determined by the user's role (Admin, Member, Operator) or by explicit membership in a collaborative document (if program collaboration will be required). The system is optimized for authorization independence and query performance.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles.
 * - `/paperTypes/{paperTypeId}`: Stores master data for paper types (public read).
 * - `/itemTypes/{itemTypeId}`: Stores master data for item types (public read).
 * - `/stock/{stockId}`: Stores stock information (Admin only).
 * - `/programs/{programId}`: Stores program information, potentially with a 'members' map for collaboration.
 * - `/reels/{reelRulingId}`: Stores reel ruling entries, potentially with a denormalized program 'members' map.
 * - `/reports/{reportId}`: Stores generated reports.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Listing of users is disallowed.
 * - Master data collections (`paperTypes`, `itemTypes`) are publicly readable.
 * - Stock information is restricted to Admin users.
 * - Collaboration is enabled through explicit 'members' maps on `programs` and `reels`.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `users/{userId}` document, avoiding extra reads.
 * - Collaborative documents (`programs`, `reels`) may contain a denormalized `members` map to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can access/modify their profile.
     * @deny (create) User trying to create a profile with a mismatched ID.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces user-ownership for profile data and prevents unauthorized listing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to paper types master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read paper type data.
     * @deny (create, update, delete) Only admins can modify paper type data. // TODO: Add admin check once roles are implemented.
     * @principle Public read, admin-only write for master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to item types master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read item type data.
     * @deny (create, update, delete) Only admins can modify item type data. // TODO: Add admin check once roles are implemented.
     * @principle Public read, admin-only write for master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to stock information.
     * @path /stock/{stockId}
     * @allow (create, get, list, update, delete) Only admins can access stock data. // TODO: Add admin check once roles are implemented.
     * @deny  Non-admins cannot access stock data.
     * @principle Admin-only access for sensitive stock data.
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to production programs.
     * @path /programs/{programId}
     * @allow (get, list) Any user can read the production programs data.
     * @deny (create, update, delete) Only admins can modify production program data. // TODO: Add admin check once roles are implemented.
     * @principle Collaboration is enabled through explicit 'members' maps on `programs`
     */
    match /programs/{programId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add admin role check and members map check
    }

    /**
     * @description Controls access to reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any user can read the reel ruling entries.
     * @deny (create, update, delete) Only admins can modify reel ruling entries. // TODO: Add admin check once roles are implemented.
     * @principle Collaboration is enabled through explicit 'members' maps on `reels`.
     */
    match /reels/{reelRulingId} {
       allow get, list: if true;
       allow create, update, delete: if false;  // TODO: Add admin role check and members map check
    }

    /**
     * @description Controls access to generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) Any user can read the generated reports.
     * @deny (create, update, delete) Only admins can modify generated reports. // TODO: Add admin check once roles are implemented.
     * @principle Read access for all, write access restricted to admins.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }
  }
}