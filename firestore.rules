/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and creator-ownership for reels and rulings.
 * Master data collections like `paperTypes` and `itemTypes` are publicly readable.
 * @data_structure
 * - /users/{userId}: User profile information, owned by the user.
 * - /paperTypes/{paperTypeId}: Master data for paper types. Publicly readable.
 * - /itemTypes/{itemTypeId}: Master data for item types. Publicly readable.
 * - /reels/{reelId}: Individual reel stock information, owned by the creator.
 * - /programs/{programId}: Production program definitions.
 * - /rulings/{rulingId}: Ruling entries for each reel, owned by the creator.
 * @key_security_decisions
 * - Users can only read and write their own profile data.
 * - Master data (paperTypes, itemTypes) is publicly readable but not writable (create, update, delete are denied).
 * - Reels and Rulings are protected by creator-ownership: only the user who created the document can update or delete it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles; only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create a profile with id 'user123'.
     * @allow (get) User with UID 'user123' can read their own profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their own profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their own profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile with id 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Make paperTypes publicly readable, but prevent any writes.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Any user can read paper type data.
     * @allow (list) Any user can list paper types.
     * @deny (create) No one can create paper type data.
     * @deny (update) No one can update paper type data.
     * @deny (delete) No one can delete paper type data.
     * @principle Public read access with no write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Make itemTypes publicly readable, but prevent any writes.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Any user can read item type data.
     * @allow (list) Any user can list item types.
     * @deny (create) No one can create item type data.
     * @deny (update) No one can update item type data.
     * @deny (delete) No one can delete item type data.
     * @principle Public read access with no write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforce creator-ownership for reels: only the creator can update or delete.
     * @path /reels/{reelId}
     * @allow (create) User with UID 'user123' can create a reel if createdBy is 'user123'.
     * @allow (get) Any user can read reel data.
     * @allow (list) Any user can list reel data.
     * @allow (update) User with UID 'user123' can update a reel if they created it.
     * @allow (delete) User with UID 'user123' can delete a reel if they created it.
     * @deny (create) User with UID 'user456' cannot create a reel with createdBy 'user123'.
     * @deny (update) User with UID 'user456' cannot update a reel created by 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a reel created by 'user123'.
     * @principle Enforces creator-ownership for writes.
     */
    match /reels/{reelId} {
        function isSignedIn() {
            return request.auth != null;
        }

      function isOwner(userId) {
        return request.auth != null && userId == request.auth.uid;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allow all reads, but restrict writes to authorized users.  No ownership is enforced on Program.
     * @path /programs/{programId}
     * @allow (get) Any user can read program data.
     * @allow (list) Any user can list program data.
     * @allow (create) Signed in user can create program data.
     * @allow (update) Signed in user can update program data.
     * @allow (delete) Signed in user can delete program data.
     * @principle Public read access with restricted write access based on authentication.
     */
    match /programs/{programId} {
        function isSignedIn() {
            return request.auth != null;
        }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforce creator-ownership for rulings: only the creator can update or delete.
     * @path /rulings/{rulingId}
     * @allow (create) User with UID 'user123' can create a ruling if createdBy is 'user123'.
     * @allow (get) Any user can read ruling data.
     * @allow (list) Any user can list ruling data.
     * @allow (update) User with UID 'user123' can update a ruling if they created it.
     * @allow (delete) User with UID 'user123' can delete a ruling if they created it.
     * @deny (create) User with UID 'user456' cannot create a ruling with createdBy 'user123'.
     * @deny (update) User with UID 'user456' cannot update a ruling created by 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a ruling created by 'user123'.
     * @principle Enforces creator-ownership for writes.
     */
    match /rulings/{rulingId} {
        function isSignedIn() {
            return request.auth != null;
        }
      function isOwner(userId) {
        return request.auth != null && userId == request.auth.uid;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }
  }
}