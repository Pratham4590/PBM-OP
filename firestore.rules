/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the owner (the user themselves).
 * - /paperTypes/{paperTypeId}: Stores master data for paper types; access is open.
 * - /itemTypes/{itemTypeId}: Stores master data for item types; access is open.
 * - /stock/{stockId}: Stores stock information; access is restricted to admins.
 * - /programs/{programId}: Stores program information; access is open.
 * - /reels/{reelRulingId}: Stores reel ruling entries; access is open.
 * - /reports/{reportId}: Stores generated reports; access is open.
 *
 * Key Security Decisions:
 * - User data is strictly owned and controlled by the user themselves.
 * - Listing of users is disallowed.
 * - Master data (paperTypes, itemTypes) is publicly readable.
 * - Stock data is only accessible to admins.
 * - Program, ReelRuling, Report are accessible to everyone
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @allow (update) User with ID 'user123' updates their own profile.
     * @deny (create) User with ID 'user456' attempts to create a profile for user 'user123'.
     * @deny (get) User with ID 'user456' attempts to read the profile of user 'user123'.
     * @deny (update) User with ID 'user456' attempts to update the profile of user 'user123'.
     * @principle Enforces user-ownership; users can only manage their own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Any user can read a paper type.
     * @allow (list) Any user can list paper types.
     * @deny (create) No one can create paper types (unless explicitly granted).
     * @deny (update) No one can update paper types (unless explicitly granted).
     * @deny (delete) No one can delete paper types (unless explicitly granted).
     * @principle Allows public read access to paper type information.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Any user can read an item type.
     * @allow (list) Any user can list item types.
     * @deny (create) No one can create item types (unless explicitly granted).
     * @deny (update) No one can update item types (unless explicitly granted).
     * @deny (delete) No one can delete item types (unless explicitly granted).
     * @principle Allows public read access to item type information.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to stock information.
     * @path /stock/{stockId}
     * @deny (get) No one can read stock information (unless explicitly granted).
     * @deny (list) No one can list stock information (unless explicitly granted).
     * @deny (create) No one can create stock information (unless explicitly granted).
     * @deny (update) No one can update stock information (unless explicitly granted).
     * @deny (delete) No one can delete stock information (unless explicitly granted).
     */
    match /stock/{stockId} {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to program information.
     * @path /programs/{programId}
     * @allow (get) Any user can read program information.
     * @allow (list) Any user can list program information.
     * @deny (create) No one can create program information (unless explicitly granted).
     * @deny (update) No one can update program information (unless explicitly granted).
     * @deny (delete) No one can delete program information (unless explicitly granted).
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get) Any user can read reel ruling entries.
     * @allow (list) Any user can list reel ruling entries.
     * @deny (create) No one can create reel ruling entries (unless explicitly granted).
     * @deny (update) No one can update reel ruling entries (unless explicitly granted).
     * @deny (delete) No one can delete reel ruling information (unless explicitly granted).
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to generated reports.
     * @path /reports/{reportId}
     * @allow (get) Any user can read generated reports.
     * @allow (list) Any user can list generated reports.
     * @deny (create) No one can create generated reports (unless explicitly granted).
     * @deny (update) No one can update generated reports (unless explicitly granted).
     * @deny (delete) No one can delete generated reports (unless explicitly granted).
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}