/**
 * @fileoverview Firestore Security Rules for Production Prototyping
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-based or role-based access control, while minimizing data validation to allow for rapid prototyping. It assumes that data validation will be implemented in the application code during the prototyping phase.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for 'paper_types', 'item_types', 'stock', 'programs', 'reels', and 'users'. The 'users' collection stores user profiles, and other collections store data related to paper, items, stock, programs and reel ruling.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Public read access is granted to 'paper_types', 'item_types', and 'programs' collections, assuming this data is intended to be publicly viewable.
 * - Access to the 'stock' collection is restricted to admins only.
 * - 'reels' collection allows read for all but write is restricted based on authentication.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * This ruleset avoids `get()` calls by assuming that any authorization-related data (e.g., user roles, ownership) is denormalized directly onto the documents being secured. For example, documents in the `/reels` collection would need to include a `creatorId` field to allow owner-based write access.
 *
 * Structural Segregation:
 * This ruleset assumes that data intended to be private is stored in user-specific subcollections (e.g., `/users/{userId}/private_data`). Publicly accessible data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user's ID matches the resource owner ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership
     */
    function isResourceOwner(resourceOwnerId) {
      return request.auth.uid == resourceOwnerId;
    }

    /**
     * @description Checks if the user is an admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Role-based access control
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership and Existence check.
     */
    function isExistingOwner(resourceOwnerId) {
        return isResourceOwner(resourceOwnerId) && resource != null;
    }

    /**
     * @description Security rules for the 'paper_types' collection. Allows public read access and restricts writes.
     * @path /paper_types/{paperTypeId}
     * @allow (get, list) Any user can read paper types.
     * @deny (create, update, delete) Only authenticated users can write paper types if `request.auth.uid` matches the `authorId` field.
     * @principle Public read, owner-only writes.
     */
    match /paper_types/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Security rules for the 'item_types' collection. Allows public read access and restricts writes.
     * @path /item_types/{itemTypeId}
     * @allow (get, list) Any user can read item types.
     * @deny (create, update, delete) Only authenticated users can write item types if `request.auth.uid` matches the `authorId` field.
     * @principle Public read, owner-only writes.
     */
    match /item_types/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Security rules for the 'stock' collection. Only admins can read and write.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) Only admins can access stock data.
     * @deny (get, list, create, update, delete) Non-admins cannot access stock data.
     * @principle Role-based access control.
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if isAdmin();
    }

     /**
      * @description Security rules for the 'programs' collection. Allows public read access and restricts writes.
      * @path /programs/{programId}
      * @allow (get, list) Any user can read programs.
      * @deny (create, update, delete) Only authenticated users can write programs if `request.auth.uid` matches the `authorId` field.
      * @principle Public read, owner-only writes.
      */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Security rules for the 'reels' collection.
     * @path /reels/{reelId}
     * @allow (get, list) Any user can read reels.
     * @allow (create) Authenticated user can create reel if `request.auth.uid` matches the `creatorId` in the data.
     * @allow (update, delete) Authenticated user can update or delete reel if `request.auth.uid` matches the reel `creatorId` and the reel exists.
     * @deny (create, update, delete) Unauthorized users cannot create, update, or delete reels.
     * @principle Owner-only writes.
     */
    match /reels/{reelId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Security rules for the 'users' collection. Allows creating a user document with a matching user ID, but denies listing all users.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own user document.
     * @allow (get, update, delete) Only the owner can access their own user document.
     * @deny (list) Listing all users is not allowed.
     * @principle Ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}