/**
 * @fileoverview Firestore Security Rules for Notebook Manufacturing Unit Application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with denormalized authorization data to minimize reads and ensure security.
 * User data is secured via path-based ownership. Collaborative data (if enabled) will use membership maps for efficient authorization.
 * Admin accounts have elevated privileges across the database.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can manage their profile.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types. Accessible to all authenticated users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types. Accessible to all authenticated users.
 * - /stock/{stockId}: Stores stock information. Only accessible and modifiable by admin users.
 * - /programs/{programId}: Stores program information.
 * - /reels/{reelRulingId}: Stores reel ruling entries.
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Public listing is enabled for `paperTypes` and `itemTypes`.
 * - Admin role is required for managing `stock`.
 * - To simplify rules and improve performance, authorization data (e.g., user roles, program members) will be denormalized directly into the documents being secured.
 * - The rules DO NOT validate the full data schema. They only validate fields critical for authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `users/{userId}` document.
 *
 * Structural Segregation:
 * - User profiles are stored in the `/users/{userId}` collection, ensuring that only the user can access their profile data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the authenticated user attempts to modify or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Allow a user to create their own profile, enforcing that the ID matches their auth UID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow the user to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow the user to update their own profile. Enforce immutability of the userId.
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - All authenticated users can read paper types.
     * @deny (create, update, delete) - Only admins can create, update, or delete paper types. // TODO: Add admin role validation if roles are implemented
     * @principle Allows public read access but restricts writes.
     */
    match /paperTypes/{paperTypeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add admin role validation if roles are implemented
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - All authenticated users can read item types.
     * @deny (create, update, delete) - Only admins can create, update, or delete item types. // TODO: Add admin role validation if roles are implemented
     * @principle Allows public read access but restricts writes.
     */
    match /itemTypes/{itemTypeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add admin role validation if roles are implemented
    }

    /**
     * @description Controls access to stock data.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) - Only admins can access and modify stock data. // TODO: Add admin role validation if roles are implemented
     * @principle Restricts access to stock data to admin users.
     */
    match /stock/{stockId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, create, update, delete: if false; // TODO: Add admin role validation if roles are implemented
    }

    /**
     * @description Controls access to program data.
     * @path /programs/{programId}
     * @allow (get, list) - All authenticated users can read programs.
     * @deny (create, update, delete) - Only admins can create, update, or delete programs. // TODO: Add admin role validation if roles are implemented
     * @principle Allows public read access but restricts writes.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add admin role validation if roles are implemented
    }

    /**
     * @description Controls access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - All authenticated users can read reel ruling.
     * @deny (create, update, delete) - Only admins can create, update, or delete reel ruling. // TODO: Add admin role validation if roles are implemented
     * @principle Allows public read access but restricts writes.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add admin role validation if roles are implemented
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     * @allow (get, list) - All authenticated users can read reports.
     * @deny (create, update, delete) - Only admins can create, update, or delete reports. // TODO: Add admin role validation if roles are implemented
     * @principle Allows public read access but restricts writes.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add admin role validation if roles are implemented
    }
  }
}