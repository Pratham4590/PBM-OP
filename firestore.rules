/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only the authenticated user can access their own profile.
 * - /paperTypes/{paperTypeId}: Stores paper type master data; publicly readable, but create, update, and delete restricted.
 * - /itemTypes/{itemTypeId}: Stores item type master data; publicly readable, but create, update, and delete restricted.
 * - /stock/{stockId}: Stores stock information; create, read, update, and delete only accessible to authenticated users.
 * - /programs/{programId}: Stores program information; only accessible and modifiable by the program's members (if collaboration is extended, otherwise only by admin).
 * - /reels/{reelRulingId}: Stores reel ruling entries; only accessible and modifiable by the reel's program members (if collaboration is extended, otherwise only by admin).
 * - /reports/{reportId}: Stores generated reports; only accessible and modifiable by the report's program members (if collaboration is extended, otherwise only by admin).
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Listing all users is disallowed.
 * - PaperType and ItemType data are publicly readable but write-protected.
 * - Stock data is only accessible to authenticated users.
 * - Program, ReelRuling, and Report data access is restricted to members or admins.
 * - Write operations on PaperType and ItemType are not validated.
 *
 * Denormalization for Authorization:
 * - Programs and ReelRulings can optionally contain a `members` map that directly stores user roles for the resource.  This avoids costly `get()` calls to other documents or collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User 'PWWbIyptlkVO56TbaoZqaoqVZ3L2' can create their own profile at /users/PWWbIyptlkVO56TbaoZqaoqVZ3L2.
     * @deny (create) User 'PWWbIyptlkVO56TbaoZqaoqVZ3L2' cannot create a profile at /users/differentUserId.
     * @allow (get, update, delete) User 'PWWbIyptlkVO56TbaoZqaoqVZ3L2' can read/update/delete their own profile at /users/PWWbIyptlkVO56TbaoZqaoqVZ3L2.
     * @deny (get, update, delete) User 'PWWbIyptlkVO56TbaoZqaoqVZ3L2' cannot read/update/delete another user's profile at /users/differentUserId.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Is Owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Is existing Owner (resource != null for update/delete)
      function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId); // Enforce immutability of user ID.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read paper type information.
     * @deny (create, update, delete) No user can create, update, or delete paper type information.
     * @principle Publicly readable, write-protected master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read item type information.
     * @deny (create, update, delete) No user can create, update, or delete item type information.
     * @principle Publicly readable, write-protected master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock information.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) Only authenticated users can manage stock information.
     * @principle Requires a valid user identity for all operations.
     */
    match /stock/{stockId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to program information.
     * @path /programs/{programId}
     * @allow (get, list, create, update, delete) Access controlled by membership or admin role.
     * @principle Uses a membership map for authorization if collaboration is required, otherwise falls back to admin-only access.
     */
    match /programs/{programId} {
       // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }
       // Is Member
      function isMember(members) {
        return members[request.auth.uid] != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list, create, update, delete) Access controlled by membership in the associated program or admin role.
     * @principle Uses a membership map (denormalized from Program) for authorization, falling back to admin-only access if no membership data is present.
     */
    match /reels/{reelRulingId} {
       // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }
       // Is Member
      function isMember(members) {
        return members[request.auth.uid] != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to generated reports.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) Access controlled by membership or admin role.
     * @principle Uses a membership map for authorization if collaboration is required, otherwise falls back to admin-only access.
     */
    match /reports/{reportId} {
       // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }
       // Is Member
      function isMember(members) {
        return members[request.auth.uid] != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}