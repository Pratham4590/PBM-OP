/**
 * @fileoverview Firestore Security Rules for Notebook Manufacturing App
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model:
 *   - User profiles are strictly owned by each user.
 *   - Master data (PaperTypes, ItemTypes) is publicly readable but restricted to admin-only creation and modification.
 *   - Programs and ReelRulings can be shared by denormalizing a 'members' map onto each document, enabling role-based access.
 *   - Stock and Reports are restricted to admin access.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /paperTypes/{paperTypeId}: Master data for paper types.
 * - /itemTypes/{itemTypeId}: Master data for item types.
 * - /stock/{stockId}: Stock information.
 * - /programs/{programId}: Production program data (potentially shared).
 * - /reels/{reelRulingId}: Reel ruling entries (potentially shared).
 * - /reports/{reportId}: Generated reports.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Master data is publicly readable.
 * - Admin role is not enforced at the rules level in this prototype.
 * - Data validation is minimized to only authorization-critical fields to enable rapid iteration.
 *
 * Denormalization for Authorization:
 * - Programs and ReelRulings have a `members` map to store user roles, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Only the user with matching UID can access their profile.
     * @deny (create) User tries to create a profile with a different UID.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId); //Removed enforcement of userId immutability, given prototyping mode
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants public read access to paper type master data.  Only admins can create, update or delete.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read the paper type data.
     * @deny (create, update, delete) Only admins can modify paper type data.  TODO: Add admin role check.
     * @principle Public read, restricted write access for master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Grants public read access to item type master data.  Only admins can create, update or delete.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read the item type data.
     * @deny (create, update, delete) Only admins can modify item type data. TODO: Add admin role check.
     * @principle Public read, restricted write access for master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Restricts access to stock information to admins only.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) Only admins can access and modify stock data. TODO: Add admin role check.
     * @principle Restricts all access to admin users.
     */
    match /stock/{stockId} {
      allow get, list: if false; // TODO: Add admin role check
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Grants role-based access to production programs.
     * @path /programs/{programId}
     * @allow (get, list) Any user can read the program data.
     * @allow (create) Only users with the 'editor' role in the members map can create.
     * @allow (update, delete) Only users with the 'editor' role in the members map can update or delete the program.
     * @principle Enforces role-based access using a denormalized members map.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isEditor(program) {
          return isSignedIn() && program.members[request.auth.uid] == 'editor';
      }

      allow get, list: if true;
      allow create: if isEditor(request.resource.data);
      allow update: if isSignedIn() && isEditor(request.resource.data);
      allow delete: if isSignedIn() && isEditor(request.resource.data);
    }

    /**
     * @description Grants role-based access to reel ruling entries, based on the associated program.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any user can read the reel ruling data.
     * @allow (create) Only users with the 'editor' role in the associated program can create.
     * @allow (update, delete) Only users with the 'editor' role in the associated program can update or delete.
     * @principle Enforces role-based access using a denormalized members map from the program.
     */
    match /reels/{reelRulingId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isEditor(programId) {
          return get(/databases/$(database)/documents/programs/$(programId)).data.members[request.auth.uid] == 'editor';
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.programId != null && isEditor(request.resource.data.programId);
        allow update: if isSignedIn() && request.resource.data.programId != null && isEditor(resource.data.programId);
        allow delete: if isSignedIn() && request.resource.data.programId != null && isEditor(resource.data.programId);
    }

    /**
     * @description Restricts access to reports to admins only.
     * @path /reports/{reportId}
     * @deny (get, list, create, update, delete) Only admins can access and modify report data. TODO: Add admin role check.
     * @principle Restricts all access to admin users.
     */
    match /reports/{reportId} {
      allow get, list: if false; // TODO: Add admin role check
      allow create: if false; // TODO: Add admin role check
      allow update: if false; // TODO: Add admin role check
      allow delete: if false; // TODO: Add admin role check
    }
  }
}