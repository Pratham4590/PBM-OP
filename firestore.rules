/**
 * @fileoverview Firestore Security Rules for Notebook Manufacturing App
 *
 * Core Philosophy: This ruleset enforces a role-based access control model with an "Admin" role, and owner-based access for user profiles.
 * Admins have full access to all collections.  Non-admin users have read-only access except for their own user document.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles; access is restricted to the owning user and admins.
 * - /paperTypes/{paperTypeId}: Stores paper type definitions; accessible to admins only.
 * - /itemTypes/{itemTypeId}: Stores item type definitions; accessible to admins only.
 * - /stock/{stockId}: Stores stock information; accessible to admins only.
 * - /programs/{programId}: Stores production program definitions; accessible to admins only.
 * - /reels/{reelRulingId}: Stores reel ruling entries; accessible to admins only.
 * - /reports/{reportId}: Stores generated reports; accessible to admins only.
 *
 * Key Security Decisions:
 * - Admin Role: The 'Admin' role, when present in a user's document, grants full read and write access to the database.
 * - User Listing Denied: Listing all users is disallowed to prevent information disclosure.
 * - Strict Ownership: Only the authenticated user can modify their own user document.
 * - No Schema Enforcement: Data validation is relaxed for prototyping speed.
 *
 * Denormalization for Authorization:
 * - User role is stored directly in the `users/{userId}` document for efficient authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
         * @description Checks if the user has the Admin role.
         * @return {bool} True if the user has the Admin role, false otherwise.
         */
        function isAdmin() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
        }

    /**
     * @description Checks if the user is the owner and the document exists.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, update, delete) Admin reads, updates, and deletes any user profile.
     * @allow (get, update, delete) Signed-in user reads, updates, and deletes their own profile.
     * @deny (create) Signed-in user creates profile for another user.
     * @deny (list) All users listing is not allowed
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      //  Allow the user to read their own document
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      //  Allow the user to create their own document, enforcing that the userId in the path
      //  matches their authentication uid.
      allow create: if isSignedIn() && isOwner(userId);
      //  Allow the user to update their own document
      allow update: if isSignedIn() && (isExistingOwner(userId) || isAdmin());
      //  Allow the user to delete their own document
      allow delete: if isSignedIn() && (isExistingOwner(userId) || isAdmin());
      //  Listing all users is not allowed
      allow list: if false;
    }

    /**
     * @description Rules for paper types.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list, create, update, delete) Admin users can read, list, create, update, and delete paper types.
     * @deny (get, list, create, update, delete) Non-admin users cannot access paper types.
     * @principle Restricts access to paper types to admin users only.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for item types.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list, create, update, delete) Admin users can read, list, create, update, and delete item types.
     * @deny (get, list, create, update, delete) Non-admin users cannot access item types.
     * @principle Restricts access to item types to admin users only.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for stock information.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) Admin users can read, list, create, update, and delete stock information.
     * @deny (get, list, create, update, delete) Non-admin users cannot access stock information.
     * @principle Restricts access to stock information to admin users only.
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for programs.
     * @path /programs/{programId}
     * @allow (get, list, create, update, delete) Admin users can read, list, create, update, and delete programs.
     * @deny (get, list, create, update, delete) Non-admin users cannot access programs.
     * @principle Restricts access to programs to admin users only.
     */
    match /programs/{programId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for reel rulings.
     * @path /reels/{reelRulingId}
     * @allow (get, list, create, update, delete) Admin users can read, list, create, update, and delete reel rulings.
     * @deny (get, list, create, update, delete) Non-admin users cannot access reel rulings.
     * @principle Restricts access to reel rulings to admin users only.
     */
    match /reels/{reelRulingId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for reports.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) Admin users can read, list, create, update, and delete reports.
     * @deny (get, list, create, update, delete) Non-admin users cannot access reports.
     * @principle Restricts access to reports to admin users only.
     */
    match /reports/{reportId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }
  }
}