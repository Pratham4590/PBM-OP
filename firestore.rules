/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *  It prioritizes authorization independence and leverages denormalization to optimize security rule performance.
 *  User data is protected via ownership, while access to manufacturing data (paper types, stock, programs, rulings, reports)
 *  is controlled by user roles (admin, operator, member).
 * @data_structure
 *  - /users/{userId}: Stores individual user profiles, with the document ID matching the Firebase Auth UID.
 *  - /paperTypes/{paperTypeId}: Stores master data for paper types.
 *  - /itemTypes/{itemTypeId}: Stores master data for item types.
 *  - /stock/{stockId}: Stores stock information, accessible and modifiable by admin users only.
 *  - /programs/{programId}: Stores program information, potentially with a 'members' map for collaborative access.
 *  - /reels/{reelRulingId}: Stores reel ruling entries, potentially linked to a program.
 *  - /reports/{reportId}: Stores generated reports.
 * @key_security_decisions
 *  - User listing is generally disallowed to protect privacy.
 *  - All write operations are explicitly authorized based on role or ownership. There are no `if true` write rules.
 *  - Authorization data (e.g., user roles, program memberships) is denormalized onto documents to avoid costly `get()` calls in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their own profile.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete profile with ID 'user123'.
     * @principle Enforces document ownership; users can only manage their own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is generally disallowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to paper type data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any signed-in user can read paper type data.
     * @deny (create, update, delete) Only admins can create, update, or delete paper type data.
     * @principle Role-based access control; read access is public, write access is admin-only.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to item type data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any signed-in user can read item type data.
     * @deny (create, update, delete) Only admins can create, update, or delete item type data.
     * @principle Role-based access control; read access is public, write access is admin-only.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to stock data.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) Only admins can access stock data.
     * @principle Role-based access control; only admins have access.
     */
    match /stock/{stockId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to program data.
     * @path /programs/{programId}
     * @allow (get, list) Any signed-in user can read program data.
     * @deny (create, update, delete) Only admins can create, update, or delete program data.
     * @principle Role-based access control; read access is public, write access is admin-only.
     */
    match /programs/{programId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any signed-in user can read reel ruling data.
     * @deny (create, update, delete) Only admins can create, update, or delete reel ruling data.
     * @principle Role-based access control; read access is public, write access is admin-only.
     */
    match /reels/{reelRulingId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     * @allow (get, list) Any signed-in user can read report data.
     * @deny (create, update, delete) Only admins can create, update, or delete report data.
     * @principle Role-based access control; read access is public, write access is admin-only.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.email == 'admin@reeltime.app';
    }
  }
}