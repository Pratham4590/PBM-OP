/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and public read access with owner-only writes for master data (paperTypes, itemTypes) and other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the owning user.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types, publicly readable but writable by authorized users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types, publicly readable but writable by authorized users.
 * - /stock/{stockId}: Stores stock information, accessible only by authorized users.
 * - /programs/{programId}: Stores program information, potentially collaborative with access controlled by a members map (if implemented).
 * - /reels/{reelRulingId}: Stores reel ruling entries, potentially collaborative with access controlled by a members map (if implemented).
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted to master data collections to facilitate UI rendering.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - All write operations are guarded by authorization checks.
 *
 * Denormalization for Authorization:
 * - To ensure authorization independence, roles are stored directly within the user document.
 * - For collaborative documents (Programs, ReelRulings), a `members` map is used to store user-specific roles, avoiding costly `get()` calls.
 *
 * Structural Segregation:
 * - User data is stored in a dedicated /users/{userId} collection, separate from public data, to simplify rules and improve security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owning user to read and write their data.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if request.auth.uid == userId
     * @deny (create, update, get, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to paper types while restricting write access.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false // TODO: Add role based access later
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role based access later
    }

    /**
     * @description Allows public read access to item types while restricting write access.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false // TODO: Add role based access later
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role based access later
    }

    /**
     * @description Restricts access to stock information, allowing only authorized users to read and write.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) if false // TODO: Add role based access later
     * @principle Restricts access to stock data to authorized users.
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if false; // TODO: Add role based access later
    }

    /**
     * @description Secures program information.
     * @path /programs/{programId}
     * @allow (get, list) if true // TODO: Should probably be restricted, review later.
     * @allow (create, update, delete) if false // TODO: Add role based access later or shared access
     * @principle Restricts access to program data based on user roles or shared access.
     */
    match /programs/{programId} {
       allow get, list: if true; // TODO: Should probably be restricted, review later.
       allow create, update, delete: if false; // TODO: Add role based access later or shared access
    }

    /**
     * @description Secures reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) if true // TODO: Should probably be restricted, review later.
     * @allow (create, update, delete) if false // TODO: Add role based access later or shared access
     * @principle Restricts access to reel ruling data based on user roles or shared access.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true; // TODO: Should probably be restricted, review later.
      allow create, update, delete: if false; // TODO: Add role based access later or shared access
    }

    /**
     * @description Secures generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) if true // TODO: Should probably be restricted, review later.
     * @allow (create, update, delete) if false // TODO: Add role based access later
     * @principle Restricts access to reports based on user roles or shared access.
     */
    match /reports/{reportId} {
      allow get, list: if true; // TODO: Should probably be restricted, review later.
      allow create, update, delete: if false; // TODO: Add role based access later
    }
  }
}