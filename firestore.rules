/**
 * @file Firestore Security Rules for Notebook Manufacturing App
 * @corePhilosophy This ruleset enforces role-based access control with ownership restrictions for specific collections. It prioritizes security and data integrity by validating user roles and document ownership.  Denormalization is used to improve performance by avoiding expensive `get()` calls.
 * @dataStructure The Firestore database is structured with a top-level collections for `users`, `paperTypes`, `itemTypes`, `stock`, `programs`, `reels`, and `reports`. User-specific data is stored under `/users/{userId}`, while other collections store application-wide data.
 * @keySecurityDecisions
 *   - Admin users have full access to `stock` and `reports` collections.
 *   - Only authenticated users can access the `users` collection.
 *   - The `reels` collection enforces role-based access control with ownership for `operator` users.
 *   - `list` operations for user-scoped subcollections default to owner-only access.
 *   - Unspecified permissions are explicitly denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only authenticated users to read and write their own user document.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read paper types, but restricts creation, update, and deletion to authenticated users.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @deny (update, delete) if true
     * @principle Public read access with authenticated-user-only writes.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read item types, but restricts creation, update, and deletion to authenticated users.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @deny (update, delete) if true
     * @principle Public read access with authenticated-user-only writes.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows only admin users to manage stock information.
     * @path /stock/{stockId}
     * @allow (read, write, create, update, delete) if isAdmin()
     * @deny (read, write, create, update, delete) if !isAdmin()
     * @principle Enforces role-based access control for sensitive data.
     */
    match /stock/{stockId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to read programs, but restricts creation, update, and deletion based on role.
     * @path /programs/{programId}
     * @allow (read) if isSignedIn()
     * @allow (create) if isAdmin() || isMember()
     * @deny (update, delete) if !isAdmin()
     * @principle Enforces role-based access control for production programs.
     */
    match /programs/{programId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin() || isMember();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to read reel rulings.  Operators can only write their own reel rulings.
     * @path /reels/{reelRulingId}
     * @allow (read) if isSignedIn()
     * @allow (create) if isAdmin() || isMember() || (isOperator() && request.resource.data.createdBy == request.auth.uid)
     * @deny (update, delete) if !isAdmin()
     * @principle Enforces role-based access control and ownership for reel rulings.
     */
    match /reels/{reelRulingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin() || isMember() || (isOperator() && request.resource.data.createdBy == request.auth.uid);
      allow update: if isAdmin() || (isOperator() && isExistingOwner(request.auth.uid));
      allow delete: if isAdmin();
    }

    /**
     * @description Allows only admin users to manage reports.
     * @path /reports/{reportId}
     * @allow (read, write, create, update, delete) if isAdmin()
     * @deny (read, write, create, update, delete) if !isAdmin()
     * @principle Enforces role-based access control for reporting data.
     */
    match /reports/{reportId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isMember() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Member';
    }

    function isOperator() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Operator';
    }
  }
}