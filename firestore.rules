/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for a notebook manufacturing unit application.
 *
 * Core Philosophy:
 *  - Strict role-based authorization, ensuring that only authorized users can access specific data.
 *  - Authorization independence is achieved through data denormalization to avoid costly `get()` calls.
 *
 * Data Structure:
 *  - `/users/{userId}`: Stores user profile information, accessible only to the user and admins.
 *  - `/paperTypes/{paperTypeId}`: Stores paper type master data. Create, update, delete restricted to admins.  Read is public.
 *  - `/itemTypes/{itemTypeId}`: Stores item type master data. Create, update, delete restricted to admins. Read is public.
 *  - `/stock/{stockId}`: Stores stock information, accessible only to admins.
 *  - `/programs/{programId}`: Stores production program data. Create, update, delete restricted to admins.
 *  - `/reels/{reelRulingId}`: Stores reel ruling data. Create, update, delete restricted to admins.
 *  - `/reports/{reportId}`: Stores generated reports. Create, update, delete restricted to admins.
 *
 * Key Security Decisions:
 *  - User listing is implicitly denied (no `allow list` rule for `/users`).
 *  - All write operations (create, update, delete) require authorization checks.
 *  - Flexible data shapes are allowed in this prototyping phase, but authorization is strictly enforced.
 *
 * Denormalization for Authorization:
 *  - User roles are stored directly in the `users/{userId}` document, eliminating the need for `get()` calls to a separate roles collection.
 *  - For collaborative data (if implemented in the future), membership maps are denormalized into documents to avoid `get()` calls for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId) - Allows a user to access their own profile.
     * @allow (create) if isSignedIn() && isOwner(userId) - Allows a user to create their own profile.
     * @deny (get, update, delete) if !isSignedIn() - Denies access to non-authenticated users.
     * @deny (get, update, delete) if isSignedIn() && !isOwner(userId) - Denies access to other users' profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Read operations
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.

      // Write operations
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to paper type master data, restricted to admins for write operations.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) if true - Allows anyone to read paper type data.
     * @allow (create, update, delete) if isAdmin() - Allows admins to manage paper type data.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from managing paper type data.
     * @principle Enforces role-based access control for master data management.
     */
    match /paperTypes/{paperTypeId} {
      // Helper function to check if the user has the "Admin" role
      function isAdmin() {
        return request.auth.token.role == "Admin";
      }

      // Read operations
      allow get, list: if true;

      // Write operations
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to item type master data, restricted to admins for write operations.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) if true - Allows anyone to read item type data.
     * @allow (create, update, delete) if isAdmin() - Allows admins to manage item type data.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from managing item type data.
     * @principle Enforces role-based access control for master data management.
     */
    match /itemTypes/{itemTypeId} {
      // Helper function to check if the user has the "Admin" role
      function isAdmin() {
        return request.auth.token.role == "Admin";
      }

      // Read operations
      allow get, list: if true;

      // Write operations
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to stock information, restricted to admins.
     * @path /stock/{stockId}
     * @allow (create, update, delete) if isAdmin() - Allows admins to manage stock data.
     * @allow (get, list) if isAdmin() - Allows admins to read stock data.
     * @deny (create, update, delete, get, list) if !isAdmin() - Denies non-admins from accessing stock data.
     * @principle Enforces role-based access control for sensitive stock data.
     */
    match /stock/{stockId} {
      // Helper function to check if the user has the "Admin" role
      function isAdmin() {
        return request.auth.token.role == "Admin";
      }

      // Read operations
      allow get, list: if isAdmin();

      // Write operations
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to program information, restricted to admins.
     * @path /programs/{programId}
     * @allow (create, update, delete) if isAdmin() - Allows admins to manage program data.
     * @allow (get, list) if isAdmin() - Allows admins to read program data.
     * @deny (create, update, delete, get, list) if !isAdmin() - Denies non-admins from accessing program data.
     * @principle Enforces role-based access control for production program data.
     */
    match /programs/{programId} {
      // Helper function to check if the user has the "Admin" role
      function isAdmin() {
        return request.auth.token.role == "Admin";
      }

      // Read operations
      allow get, list: if isAdmin();

      // Write operations
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to reel ruling information, restricted to admins.
     * @path /reels/{reelRulingId}
     * @allow (create, update, delete) if isAdmin() - Allows admins to manage reel ruling data.
     * @allow (get, list) if isAdmin() - Allows admins to read reel ruling data.
     * @deny (create, update, delete, get, list) if !isAdmin() - Denies non-admins from accessing reel ruling data.
     * @principle Enforces role-based access control for reel ruling data.
     */
    match /reels/{reelRulingId} {
      // Helper function to check if the user has the "Admin" role
      function isAdmin() {
        return request.auth.token.role == "Admin";
      }

      // Read operations
      allow get, list: if isAdmin();

      // Write operations
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to reports, restricted to admins.
     * @path /reports/{reportId}
     * @allow (create, update, delete) if isAdmin() - Allows admins to manage report data.
     * @allow (get, list) if isAdmin() - Allows admins to read report data.
     * @deny (create, update, delete, get, list) if !isAdmin() - Denies non-admins from accessing report data.
     * @principle Enforces role-based access control for report data.
     */
    match /reports/{reportId} {
      // Helper function to check if the user has the "Admin" role
      function isAdmin() {
        return request.auth.token.role == "Admin";
      }

      // Read operations
      allow get, list: if isAdmin();

      // Write operations
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}