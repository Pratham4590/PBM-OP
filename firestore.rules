/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a role-based model for other data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the authenticated user can access their own profile.
 * - /paperTypes/{paperTypeId}: Stores public information about paper types. All users can read.
 * - /itemTypes/{itemTypeId}: Stores public information about item types. All users can read.
 * - /stock/{stockId}: Stores stock information. Only admin users can access.
 * - /programs/{programId}: Stores program information. Access is determined by denormalized members map (if collaboration features are added).
 * - /reels/{reelRulingId}: Stores reel ruling entries. Access is determined by denormalized program members map (if collaboration features are added).
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - Users can only access their own user profile data.
 * - Listing of user documents is disallowed to prevent enumeration.
 * - PaperTypes and ItemTypes are publicly readable.
 * - Stock can only be created, updated, or deleted by admins.
 * - Collaboration is not enabled by default.
 *
 * Denormalization for Authorization:
 * - To avoid costly `get()` calls, authorization data (e.g., user roles, member lists) should be denormalized directly into the documents being secured.
 *   - Example: Instead of fetching a user's role from a separate `/roles` collection, store the role directly in the `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched userId.
     * @deny (list) Listing users is disallowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read paper type data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read paper type data.
     * @deny (create, update, delete) Only admins can modify paper types. // TODO: Add admin role check.
     * @principle Allows public read access to PaperType documents while restricting writes.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once roles are implemented.
    }

    /**
     * @description Allows anyone to read item type data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read item type data.
     * @deny (create, update, delete) Only admins can modify item types. // TODO: Add admin role check.
     * @principle Allows public read access to ItemType documents while restricting writes.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once roles are implemented.
    }

    /**
     * @description Allows only admins to create, read, update, and delete stock data.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) No one can access stock data, since no roles are implemented yet. // TODO: Implement admin role.
     * @principle Restricts access to Stock documents to admin users only.
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if false; // TODO: Add admin validation once roles are implemented.
    }

    /**
     * @description Allows access to program data.
     * @path /programs/{programId}
     * @deny (get, list, create, update, delete) No access to programs data. // TODO: Implement roles and access control.
     * @principle Restricts access to Program documents.
     */
    match /programs/{programId} {
        allow get, list, create, update, delete: if false; // TODO: Add owner or shared-access validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @deny (get, list, create, update, delete) No access to reel ruling data. // TODO: Implement roles and access control.
     * @principle Restricts access to ReelRuling documents.
     */
    match /reels/{reelRulingId} {
        allow get, list, create, update, delete: if false; // TODO: Add owner or shared-access validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows access to report data.
     * @path /reports/{reportId}
     * @deny (get, list, create, update, delete) No access to report data. // TODO: Implement roles and access control.
     * @principle Restricts access to Report documents.
     */
    match /reports/{reportId} {
        allow get, list, create, update, delete: if false; // TODO: Add owner or shared-access validation once the schema is updated with an ownership field.
    }
  }
}