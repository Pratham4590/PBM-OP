/**
 * @file Firebase Security Rules for Notebook Manufacturing App
 *
 * @core_philosophy This ruleset enforces a combination of user-ownership and role-based access control.
 * User data is strictly owned by the user. Master data (itemTypes, paperTypes) is publicly readable but
 * only modifiable by admins. Stock data is only accessible and modifiable by admins. Programs and ReelRulings
 * can be accessed by collaborators if the collaboration feature is implemented, otherwise, they are admin-only.
 *
 * @data_structure
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /itemTypes/{itemTypeId}: Stores item type master data, publicly readable, admin-only writeable.
 * - /paperTypes/{paperTypeId}: Stores paper type master data, publicly readable, admin-only writeable.
 * - /stock/{stockId}: Stores stock data, accessible only to admins.
 * - /programs/{programId}: Stores program data, potentially with a denormalized members map for collaboration.
 * - /reels/{reelRulingId}: Stores reel ruling data, potentially linked to a program with a members map.
 * - /reports/{reportId}: Stores report data, accessible only to admins.
 *
 * @key_security_decisions
 * - User data is private and only accessible to the owning user.
 * - Master data (itemTypes, paperTypes) is publicly readable for ease of use in the application.
 * - The `list` operation is allowed for `itemTypes` and `paperTypes` because they are public.
 * - Administrative operations (stock) are restricted to users with the "Admin" role.
 * - No open write rules are allowed. All writes must be authorized.
 * - The existence of documents is always validated before update or delete operations.
 *
 * @denormalization_for_authorization
 * - User roles are stored directly in the `users/{userId}` document.
 * - For collaborative data (programs, reelRulings), the `members` map is denormalized into each document
 *   to avoid `get()` calls to determine access. If programs can be collaboratively modified, then add a
 *   `members` map with user IDs mapped to roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete 'user123' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.id == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read paper type data.
     * @allow (create, update, delete) Only admins can create, update, or delete paper type data.
     * @deny (create, update, delete) Non-admin users cannot modify paper type data.
     * @principle Public read access with admin-only writes for master data.
     */
    match /paperTypes/{paperTypeId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      function isExistingAdmin() {
        return isAdmin() && exists(/databases/$(database)/documents/paperTypes/$(paperTypeId));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read item type data.
     * @allow (create, update, delete) Only admins can create, update, or delete item type data.
     * @deny (create, update, delete) Non-admin users cannot modify item type data.
     * @principle Public read access with admin-only writes for master data.
     */
    match /itemTypes/{itemTypeId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      function isExistingAdmin() {
        return isAdmin() && exists(/databases/$(database)/documents/itemTypes/$(itemTypeId));
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Controls access to stock data.
     * @path /stock/{stockId}
     * @allow (create, update, delete) Only admins can create, update, or delete stock data.
     * @deny (get, list) Non-admin users cannot read stock data.
     * @principle Admin-only access for sensitive stock information.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      function isExistingAdmin() {
        return isAdmin() && exists(/databases/$(database)/documents/stock/$(stockId));
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Controls access to program data.
     * @path /programs/{programId}
     * @allow (create, update, delete) Only admins can create, update, or delete program data.
     *   If collaboration is implemented, the rule will allow program members to update program data.
     * @deny (get, list) Non-admin users cannot read program data.
     * @principle Admin-only access with potential for shared access via a members map.
     */
    match /programs/{programId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      function isExistingAdmin() {
        return isAdmin() && exists(/databases/$(database)/documents/programs/$(programId));
      }

      function isCollaborator() {
          return request.auth != null && get(/databases/$(database)/documents/programs/$(programId)).data.members[request.auth.uid] != null;
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin() || (exists(/databases/$(database)/documents/programs/$(programId)) && isCollaborator());
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Controls access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (create, update, delete) Only admins can create, update, or delete reel ruling data.
     *   If collaboration is implemented, the rule will allow program members to update reel ruling data related to the programs.
     * @deny (get, list) Non-admin users cannot read reel ruling data.
     * @principle Admin-only access with potential for shared access via a members map through program relation.
     */
    match /reels/{reelRulingId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      function isExistingAdmin() {
        return isAdmin() && exists(/databases/$(database)/documents/reels/$(reelRulingId));
      }

      // Add the following functions when ReelRuling can be modified by program members (if collaboration is implemented)
      function isCollaborator(programId) {
        return request.auth != null && get(/databases/$(database)/documents/programs/$(programId)).data.members[request.auth.uid] != null;
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin() || (request.resource.data.programId is string && exists(/databases/$(database)/documents/reels/$(reelRulingId)) && isCollaborator(request.resource.data.programId));  // programId is needed for collaborator validation
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     * @allow (create, update, delete) Only admins can create, update, or delete report data.
     * @deny (get, list) Non-admin users cannot read report data.
     * @principle Admin-only access for report information.
     */
    match /reports/{reportId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      function isExistingAdmin() {
        return isAdmin() && exists(/databases/$(database)/documents/reports/$(reportId));
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }
  }
}