/**
 * @fileoverview Firestore Security Rules for Notebook Manufacturing App
 *
 * Core Philosophy: This ruleset enforces a role-based access control model with user-specific data ownership where applicable.
 *   Admin roles are granted via custom claims.
 *   All other collections require authentication for write operations.
 *
 * Data Structure:
 *   - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 *   - /paperTypes/{paperTypeId}: Stores paper type data.
 *   - /itemTypes/{itemTypeId}: Stores item type data.
 *   - /stock/{stockId}: Stores stock information. Only accessible to admin users.
 *   - /programs/{programId}: Stores production program data.
 *   - /reels/{reelRulingId}: Stores reel ruling data.
 *   - /reports/{reportId}: Stores report data.
 *
 * Key Security Decisions:
 *   - Listing all users is disallowed for security reasons.
 *   - Read-only collections (paperTypes, itemTypes) are publicly readable.
 *   - The default security posture for collections without explicit ownership is authentication required for write access.
 *
 * Denormalization for Authorization:
 *   - User roles are stored directly in the `users/{userId}` document to avoid `get()` calls during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their own profile.
     * @deny (create, update, delete) User with UID 'user456' cannot create/update/delete user123's profile.
     * @principle Enforces user-ownership; only the authenticated user can manage their own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read paper type information.
     * @deny (create, update, delete) No user can create, update, or delete paper type data without specific role.
     * @principle Paper type information is considered public and read-only.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read item type information.
     * @deny (create, update, delete) No user can create, update, or delete item type data without specific role.
     * @principle Item type information is considered public and read-only.
     */
    match /itemTypes/{itemTypeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock data.
     * @path /stock/{stockId}
     * @allow (get, list) Any user can read stock information.
     * @deny (create, update, delete) Only admin users can modify stock data.
     * @principle Stock data management is restricted to administrators.
     */
    match /stock/{stockId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to program data.
     * @path /programs/{programId}
     * @allow (get, list) Any user can read program information.
     * @deny (create, update, delete) Only authenticated users can modify program data.
     * @principle Program data management is restricted to authenticated users.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any user can read reel ruling information.
     * @deny (create, update, delete) Only authenticated users can modify reel ruling data.
     * @principle Reel ruling data management is restricted to authenticated users.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     * @allow (get, list) Any user can read report information.
     * @deny (create, update, delete) Only authenticated users can modify report data.
     * @principle Report data management is restricted to authenticated users.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}