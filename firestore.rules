/**
 * @fileoverview Firestore Security Rules for Production Prototyping
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles.
 * It is in prototyping mode, which means data validation is relaxed to allow rapid iteration,
 * but authorization is strictly enforced to prevent unauthorized data access.
 *
 * Data Structure:
 * - /paper_types: Stores paper types. Currently allows public read, but restricts write access.
 * - /item_types: Stores item types. Currently allows public read, but restricts write access.
 * - /stock: Stores stock information. Only admins can modify.
 * - /programs: Stores program information.
 * - /reels: Stores reel ruling entries.
 * - /users: Stores user profiles, including roles (Admin, Member, Operator).
 *
 * Key Security Decisions:
 * - Users collection is protected for read and write.
 * - Data validation is minimized in this prototyping phase to allow for schema iteration.
 * - All write operations are explicitly secured with authorization checks.
 *
 * Denormalization for Authorization:
 *  - For simplicity, the user's role is stored directly in the /users/{userId} document.
 *    This avoids the need for complex subcollection queries to determine a user's role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to paper types, but restricts write access.
     * @path /databases/{database}/documents/paper_types
     * @allow (get, list): Any user can read paper types.
     * @deny (create, update, delete): No one can write without authentication
     * @principle Public read, restricted writes.
     */
    match /paper_types/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add admin role validation once roles implemented.
    }

    /**
     * @description Allows read access to item types, but restricts write access.
     * @path /databases/{database}/documents/item_types
     * @allow (get, list): Any user can read item types.
     * @deny (create, update, delete): No one can write without authentication
     * @principle Public read, restricted writes.
     */
    match /item_types/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add admin role validation once roles implemented.
    }

    /**
     * @description Allows admins to manage stock levels.
     * @path /databases/{database}/documents/stock
     * @allow (create, update, delete): Only admins can modify stock levels.
     * @deny (get, list): Not implemented get and list
     * @principle Role-based access control.
     */
    match /stock/{stockId} {
      allow get, list: if false;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows access to program information.
     * @path /databases/{database}/documents/programs
     * @allow (get, list): Any user can read program data.
     * @allow (create, update, delete): Only admins can modify program data.
     * @principle Role-based access control.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows access to reel ruling entries.
     * @path /databases/{database}/documents/reels
     * @allow (get, list): Any user can read reel data.
     * @allow (create, update, delete): Only admins can modify reel data.
     * @principle Role-based access control.
     */
    match /reels/{reelId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages user profiles. Only admins can create/update/delete users.
     * @path /databases/{database}/documents/users
     * @allow (get, list): Only admins can list and get users data.
     * @allow (create, update, delete): Only admins can create/update/delete users.
     * @principle Role-based access control.
     */
    match /users/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    //---------------- Helper functions ----------------

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}