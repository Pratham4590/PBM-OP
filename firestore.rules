/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and role-based access control for other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /paperTypes/{paperTypeId}: Stores paper type master data.
 * - /itemTypes/{itemTypeId}: Stores item type master data.
 * - /stock/{stockId}: Stores stock information, accessible only by admins.
 * - /programs/{programId}: Stores program information.
 * - /reels/{reelRulingId}: Stores reel ruling entries.
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is not generally granted to any collection.
 * - Write access to the /stock collection is restricted to admin users only.
 * - Ownership is enforced for user profiles, ensuring that users can only manage their own data.
 *
 * Denormalization for Authorization:
 * - The `users/{userId}` document stores the user's role, eliminating the need for separate role lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with ID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      // Allow the user to create their own profile, validating the user ID matches the auth UID.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      // Allow the user to update their own profile, enforcing immutability of the user ID.
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
      // Prevent listing of all users for privacy reasons.
      allow list: if false;
    }

    /**
     * @description Secure access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Any authenticated user can read paper type data.
     * @deny (create) No user can create paper type data.
     * @deny (update) No user can update paper type data.
     * @deny (delete) No user can delete paper type data.
     * @principle Restricts write access to prevent unauthorized modification of master data.
     */
    match /paperTypes/{paperTypeId} {
      // Allow any authenticated user to read paper types.
      allow get, list: if isSignedIn();
      // Prevent anyone from creating, updating, or deleting paper types.
      allow create, update, delete: if false;
    }

    /**
     * @description Secure access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Any authenticated user can read item type data.
     * @deny (create) No user can create item type data.
     * @deny (update) No user can update item type data.
     * @deny (delete) No user can delete item type data.
     * @principle Restricts write access to prevent unauthorized modification of master data.
     */
    match /itemTypes/{itemTypeId} {
      // Allow any authenticated user to read item types.
      allow get, list: if isSignedIn();
      // Prevent anyone from creating, updating, or deleting item types.
      allow create, update, delete: if false;
    }

    /**
     * @description Secure access to stock data, only accessible and modifiable by admin users.
     * @path /stock/{stockId}
     * @allow (get) Only admin users can read stock data.
     * @deny (create) Non-admin users cannot create stock data.
     * @deny (update) Non-admin users cannot update stock data.
     * @deny (delete) Non-admin users cannot delete stock data.
     * @principle Restricts access to sensitive stock data to authorized personnel.
     */
    match /stock/{stockId} {
      // Allow only admin users to read stock data.
      allow get, list: if isAdmin();
      // Allow only admin users to create, update, and delete stock data.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure access to program data.
     * @path /programs/{programId}
     * @allow (get) Any authenticated user can read program data.
     * @deny (create) No user can create program data.
     * @deny (update) No user can update program data.
     * @deny (delete) No user can delete program data.
     */
    match /programs/{programId} {
      // Allow any authenticated user to read programs.
      allow get, list: if isSignedIn();
      // Prevent anyone from creating, updating, or deleting programs.
      allow create, update, delete: if false;
    }

    /**
     * @description Secure access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get) Any authenticated user can read reel ruling data.
     * @deny (create) No user can create reel ruling data.
     * @deny (update) No user can update reel ruling data.
     * @deny (delete) No user can delete reel ruling data.
     */
    match /reels/{reelRulingId} {
      // Allow any authenticated user to read reel rulings.
      allow get, list: if isSignedIn();
      // Prevent anyone from creating, updating, or deleting reel rulings.
      allow create, update, delete: if false;
    }

    /**
     * @description Secure access to report data.
     * @path /reports/{reportId}
     * @allow (get) Any authenticated user can read report data.
     * @deny (create) No user can create report data.
     * @deny (update) No user can update report data.
     * @deny (delete) No user can delete report data.
     */
    match /reports/{reportId} {
      // Allow any authenticated user to read reports.
      allow get, list: if isSignedIn();
      // Prevent anyone from creating, updating, or deleting reports.
      allow create, update, delete: if false;
    }

    // allow read, write: if false;
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Checks if the user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Checks if the user has the admin role.
  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'Admin';
  }
}