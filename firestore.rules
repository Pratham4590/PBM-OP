/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types, publicly readable.
 * - /itemTypes/{itemTypeId}: Stores master data for item types, publicly readable.
 * - /stock/{stockId}: Stores stock information, only accessible and modifiable by admin users.
 * - /programs/{programId}: Stores program information, accessible to all authenticated users.
 * - /reels/{reelRulingId}: Stores reel ruling entries, accessible to all authenticated users.
 * - /reports/{reportId}: Stores generated reports, accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents.
 * - Master data (paperTypes, itemTypes) is publicly readable.
 * - Stock data is restricted to admin users.
 * - Programs, ReelRulings and Reports are accessible to all authenticated users.
 * - Data validation is relaxed in this prototype to allow for flexible schema changes. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the /users/{userId} document to avoid extra reads.
 *
 * Structural Segregation:
 * - User-specific data is stored under /users/{userId} to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, update and delete their own profile document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile document at /users/user123.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read, update or delete the profile document at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type documents.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any user can read any paper type document.
     * @deny (create, update, delete) - No user can create, update, or delete paper type documents.
     * @principle Public read access with no write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type documents.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any user can read any item type document.
     * @deny (create, update, delete) - No user can create, update, or delete item type documents.
     * @principle Public read access with no write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock documents.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) - Only admin users can read, create, update, and delete stock documents.
     * @deny (get, list, create, update, delete) - Non-admin users cannot read, create, update, or delete stock documents.
     * @principle Restricts access to stock data to admin users.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to program documents.
     * @path /programs/{programId}
     * @allow (get, list, create, update, delete) - Any authenticated user can read, create, update, and delete program documents.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete program documents.
     * @principle Authenticated users can access program data.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to reel ruling documents.
     * @path /reels/{reelRulingId}
     * @allow (get, list, create, update, delete) - Any authenticated user can read, create, update, and delete reel ruling documents.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete reel ruling documents.
     * @principle Authenticated users can access reel ruling data.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to report documents.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) - Any authenticated user can read, create, update, and delete report documents.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete report documents.
     * @principle Authenticated users can access report data.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }
  }
}