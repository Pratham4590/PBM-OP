/**
 * @file Firebase Security Rules for Firestore
 * @description This ruleset enforces a strict role-based access control model with a focus on data ownership and authorization independence.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the user themselves.
 * - /paperTypes/{paperTypeId}: Stores paper type master data; read-only for all users.
 * - /itemTypes/{itemTypeId}: Stores item type master data; read-only for all users.
 * - /stock/{stockId}: Stores stock information; only accessible to admin users.
 * - /programs/{programId}: Stores program information, potentially with a members map for collaborative access.
 * - /reels/{reelRulingId}: Stores reel ruling entries, potentially with a members map inherited from program for access control.
 * - /reports/{reportId}: Stores generated reports; access is currently open but should be restricted in a production environment.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Master data collections (paperTypes, itemTypes) are publicly readable.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Data types are not validated in this prototype.
 *
 * Denormalization for Authorization:
 * - For collaborative data (Programs, ReelRulings), a `members` map is denormalized into each document (if collaboration is desired) to avoid costly `get()` calls.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path to enforce clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document based on the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of an existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership for destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires admin role for certain operations.
     */
    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }

    /**
     * @description Enforces access control based on members map.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks whether the current user is in the members map.
     */
    function isCollaborator(members) {
      return request.auth.uid in members;
    }
    
    /**
     * @description Manages user profiles, restricting access to the user themselves.
     * @path /users/{userId}
     * @allow (create) If the user's UID matches the {userId}.
     * @allow (get, update, delete) If the user's UID matches the {userId} and the resource exists.
     * @deny (create) If the user's UID does not match the {userId}.
     * @deny (get, update, delete) If the user's UID does not match the {userId} or the resource does not exist.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages paper type master data, allowing public read access.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Everyone can read this master data.
     * @deny (create, update, delete) Nobody can modify this data (admin role required in production).
     * @principle Allows public read access to paper type data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if isAdmin(); // TODO: Only admin should be able to create this resource in production
      allow update: if isAdmin(); // TODO: Only admin should be able to update this resource in production
      allow delete: if isAdmin(); // TODO: Only admin should be able to delete this resource in production
    }

    /**
     * @description Manages item type master data, allowing public read access.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Everyone can read this master data.
     * @deny (create, update, delete) Nobody can modify this data (admin role required in production).
     * @principle Allows public read access to item type data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if isAdmin(); // TODO: Only admin should be able to create this resource in production
      allow update: if isAdmin(); // TODO: Only admin should be able to update this resource in production
      allow delete: if isAdmin(); // TODO: Only admin should be able to delete this resource in production
    }

    /**
     * @description Manages stock data, restricting access to admin users.
     * @path /stock/{stockId}
     * @allow (create, get, list, update, delete) Only admin users can access this data.
     * @deny (create, get, list, update, delete) Non-admin users cannot access this data.
     * @principle Restricts stock data access to admin users.
     */
    match /stock/{stockId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages program data, potentially allowing collaborative access through a `members` map.
     * @path /programs/{programId}
     * @allow (get, list) Everyone can read this data.
     * @allow (create) Only authenticated users can create program data. The creator will have access.
     * @allow (update, delete) Only users in the members map can update or delete the data. Document must exist.
     * @deny (create, update, delete) Other users cannot modify this data.
     * @principle Manages program data with potential for collaborative access and enforces existence for updates/deletes.
     */
    match /programs/{programId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isCollaborator(resource.data.members) && resource != null;
        allow delete: if isCollaborator(resource.data.members) && resource != null;
    }

    /**
     * @description Manages reel ruling data, potentially inheriting access from a `programId` or using its own members map.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Everyone can read this data.
     * @allow (create) Only authenticated users can create reel ruling data. The creator will have access.
     * @allow (update, delete) Only users in the members map can update or delete the data. Document must exist.
     * @deny (create, update, delete) Other users cannot modify this data.
     * @principle Manages reel ruling data with potential for collaborative access and enforces existence for updates/deletes.
     */
    match /reels/{reelRulingId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isCollaborator(resource.data.members) && resource != null;
        allow delete: if isCollaborator(resource.data.members) && resource != null;
    }

    /**
     * @description Manages report data. Access is currently open but should be restricted in a production environment.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) Everyone can access this data.
     * @deny None.
     * @principle Open access to report data (for now).
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}