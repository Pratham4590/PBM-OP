/**
 * @fileOverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model. User data is protected by ownership,
 * while master data and operational data are governed by admin/operator roles.
 * Authorization independence is achieved through denormalization of user roles and program
 * membership data directly onto secured documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types. Accessible to admins and operators.
 * - /itemTypes/{itemTypeId}: Stores master data for item types. Accessible to admins and operators.
 * - /stock/{stockId}: Stores stock information. Only accessible and modifiable by admin users.
 * - /programs/{programId}: Stores production program data. Accessible to admins and operators. Collaboration (if required) is controlled by a `members` map on the document.
 * - /reels/{reelRulingId}: Stores reel ruling data. Accessible to admins and operators. Collaboration (if required) is controlled by a `program.members` map on the associated program.
 * - /reports/{reportId}: Stores generated report data. Accessible to admins and operators.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is limited to fields critical for authorization and relational integrity.
 * - Destructive operations (update, delete) require verification of document existence.
 * - The rules do not implement full data validation to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `users/{userId}` document, avoiding `get()` calls.
 * - Program membership is denormalized into each `Program` document (if collaboration is required) to avoid `get()` calls to determine access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring only the user can access their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can retrieve their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user123' cannot retrieve another user's profile (e.g., 'user456').
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages paper types. Access is allowed to authenticated users.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Authenticated user can retrieve paper type data.
     * @allow (list) Authenticated user can list paper types.
     * @deny (create) Non-authenticated user cannot create paper type data.
     * @deny (update) Non-authenticated user cannot update paper type data.
     * @deny (delete) Non-authenticated user cannot delete paper type data.
     * @principle Restricts write access to authenticated users.
     */
    match /paperTypes/{paperTypeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Manages item types. Access is allowed to authenticated users.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Authenticated user can retrieve item type data.
     * @allow (list) Authenticated user can list item types.
     * @deny (create) Non-authenticated user cannot create item type data.
     * @deny (update) Non-authenticated user cannot update item type data.
     * @deny (delete) Non-authenticated user cannot delete item type data.
     * @principle Restricts write access to authenticated users.
     */
    match /itemTypes/{itemTypeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Manages stock data. Access is allowed to authenticated users.
     * @path /stock/{stockId}
     * @allow (get) Authenticated user can retrieve stock data.
     * @allow (list) Authenticated user can list stock data.
     * @deny (create) Non-authenticated user cannot create stock data.
     * @deny (update) Non-authenticated user cannot update stock data.
     * @deny (delete) Non-authenticated user cannot delete stock data.
     * @principle Restricts write access to authenticated users.
     */
    match /stock/{stockId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Manages production program data. Access is allowed to authenticated users.
     * @path /programs/{programId}
     * @allow (get) Authenticated user can retrieve program data.
     * @allow (list) Authenticated user can list program data.
     * @deny (create) Non-authenticated user cannot create program data.
     * @deny (update) Non-authenticated user cannot update program data.
     * @deny (delete) Non-authenticated user cannot delete program data.
     * @principle Restricts write access to authenticated users.
     */
    match /programs/{programId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Manages reel ruling data. Access is allowed to authenticated users.
     * @path /reels/{reelRulingId}
     * @allow (get) Authenticated user can retrieve reel ruling data.
     * @allow (list) Authenticated user can list reel ruling data.
     * @deny (create) Non-authenticated user cannot create reel ruling data.
     * @deny (update) Non-authenticated user cannot update reel ruling data.
     * @deny (delete) Non-authenticated user cannot delete reel ruling data.
     * @principle Restricts write access to authenticated users.
     */
    match /reels/{reelRulingId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Manages report data. Access is allowed to authenticated users.
     * @path /reports/{reportId}
     * @allow (get) Authenticated user can retrieve report data.
     * @allow (list) Authenticated user can list report data.
     * @deny (create) Non-authenticated user cannot create report data.
     * @deny (update) Non-authenticated user cannot update report data.
     * @deny (delete) Non-authenticated user cannot delete report data.
     * @principle Restricts write access to authenticated users.
     */
    match /reports/{reportId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}