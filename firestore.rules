/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing application.
 * Data is organized into collections for users, stock, master data (paper types, item types), programs, reel rulings, and reports.
 *
 * Core Philosophy:
 *   This ruleset prioritizes security by enforcing strict role-based access control for all data.
 *   Admins have full access, members have limited access (create programs, view reports), and operators have very restricted access (reel ruling only).
 *   User data is protected using an ownership model.
 *
 * Data Structure:
 *   /users/{userId}: Stores user profile information, including role (admin, member, operator).
 *   /stock/{stockId}: Stores paper stock information.
 *   /masterData/paperTypes/{paperTypeId}: Stores master data for paper types.
 *   /masterData/itemTypes/{itemTypeId}: Stores master data for item types.
 *   /programs/{programId}: Stores program information.
 *   /reels/{reelRulingId}: Stores reel ruling entries.
 *   /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 *   - Users can only read their own user document.
 *   - Stock data can only be modified by admins.
 *   - Master data (paper types, item types) can only be modified by admins.
 *   - Reports can be read by all authenticated users, but only created/updated/deleted by admins.
 *   - List operations are generally restricted to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 *   User roles are stored directly in the `users/{userId}` document, eliminating the need for extra reads during authorization.
 *   Collaboration is not required yet, but the IR mentions that the `members` map would be denormalized into documents if the posibility of collaborate on programs is added.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring users can only read their own profile and admins can manage all profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (update) Admin can update any user profile.
     * @deny  (get) User attempts to read another user's profile.
     * @deny  (create) User attempts to create a profile with a userId that doesn't match their auth UID.
     * @deny  (update) Non-admin user attempts to update a profile.
     * @principle Enforces document ownership and role-based access control.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user has the 'admin' role
      function isAdmin() {
        return isSignedIn() && (request.auth.token.role == 'admin');
      }

      // Helper function to check if the document exists and the user is the owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && (isAdmin() || request.resource.data.id == resource.data.id); // Only admin can change the id of the user
      allow delete: if isExistingOwner(userId) && isAdmin();
    }

    /**
     * @description Manages paper type master data, accessible only to admins.
     * @path /masterData/paperTypes/{paperTypeId}
     * @allow (create) Admin can create new paper types.
     * @allow (update) Admin can update existing paper types.
     * @allow (delete) Admin can delete paper types.
     * @allow (get) Any authenticated user can read paper types.
     * @deny  (create) Non-admin user attempts to create a paper type.
     * @deny  (update) Non-admin user attempts to update a paper type.
     * @deny  (delete) Non-admin user attempts to delete a paper type.
     * @principle Restricts write access to admins for master data management.
     */
    match /masterData/paperTypes/{paperTypeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user has the 'admin' role
        function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
        }
        
        // Helper function to check if the document exists and the user is admin
        function isExistingAdmin() {
          return isAdmin() && resource != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages item type master data, accessible only to admins.
     * @path /masterData/itemTypes/{itemTypeId}
     * @allow (create) Admin can create new item types.
     * @allow (update) Admin can update existing item types.
     * @allow (delete) Admin can delete item types.
     * @allow (get) Any authenticated user can read item types.
     * @deny  (create) Non-admin user attempts to create an item type.
     * @deny  (update) Non-admin user attempts to update an item type.
     * @deny  (delete) Non-admin user attempts to delete an item type.
     * @principle Restricts write access to admins for master data management.
     */
    match /masterData/itemTypes/{itemTypeId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user has the 'admin' role
        function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
        }

        // Helper function to check if the document exists and the user is admin
        function isExistingAdmin() {
          return isAdmin() && resource != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages stock data, accessible only to admins.
     * @path /stock/{stockId}
     * @allow (create) Admin can create new stock entries.
     * @allow (update) Admin can update existing stock entries.
     * @allow (delete) Admin can delete stock entries.
     * @allow (get) Any authenticated user can read stock entries.
     * @deny  (create) Non-admin user attempts to create a stock entry.
     * @deny  (update) Non-admin user attempts to update a stock entry.
     * @deny  (delete) Non-admin user attempts to delete a stock entry.
     * @principle Restricts all access to stock data to admins.
     */
    match /stock/{stockId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user has the 'admin' role
        function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
        }

        // Helper function to check if the document exists and the user is admin
        function isExistingAdmin() {
          return isAdmin() && resource != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages program data, allowing members to create and manage their own programs, and admins full access.
     * @path /programs/{programId}
     * @allow (create) Member can create new programs.
     * @allow (update) Admin can update existing programs.
     * @allow (delete) Admin can delete programs.
     * @allow (get) Any authenticated user can read programs.
     * @deny  (create) Non-member user attempts to create a program.
     * @deny  (update) Non-admin user attempts to update a program.
     * @deny  (delete) Non-admin user attempts to delete a program.
     * @principle Restricts write access based on user role.
     */
    match /programs/{programId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user has the 'admin' role
        function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
        }

        function isMember() {
          return isSignedIn() && (request.auth.token.role == 'member');
        }

        // Helper function to check if the document exists and the user is admin
        function isExistingAdmin() {
          return isAdmin() && resource != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isMember() || isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages reel ruling data, allowing operators to create and manage reel rulings, and admins full access.
     * @path /reels/{reelRulingId}
     * @allow (create) Operator can create new reel rulings.
     * @allow (update) Admin can update existing reel rulings.
     * @allow (delete) Admin can delete reel rulings.
     * @allow (get) Any authenticated user can read reel rulings.
     * @deny  (create) Non-operator user attempts to create a reel ruling.
     * @deny  (update) Non-admin user attempts to update a reel ruling.
     * @deny  (delete) Non-admin user attempts to delete a reel ruling.
     */
    match /reels/{reelRulingId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user has the 'admin' role
        function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
        }

        function isOperator() {
          return isSignedIn() && (request.auth.token.role == 'operator');
        }

        // Helper function to check if the document exists and the user is admin
        function isExistingAdmin() {
          return isAdmin() && resource != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isOperator() || isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages report data, allowing admins to create, update, and delete reports, and all users to read them.
     * @path /reports/{reportId}
     * @allow (create) Admin can create new reports.
     * @allow (update) Admin can update existing reports.
     * @allow (delete) Admin can delete reports.
     * @allow (get) Any authenticated user can read reports.
     * @deny  (create) Non-admin user attempts to create a report.
     * @deny  (update) Non-admin user attempts to update a report.
     * @deny  (delete) Non-admin user attempts to delete a report.
     */
    match /reports/{reportId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user has the 'admin' role
        function isAdmin() {
          return isSignedIn() && (request.auth.token.role == 'admin');
        }

        // Helper function to check if the document exists and the user is admin
        function isExistingAdmin() {
          return isAdmin() && resource != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }
  }
}