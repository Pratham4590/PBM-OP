rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the 'Member' role.
     */
    function isMember() {
      return isSignedIn() && request.auth.token.role == 'Member';
    }

    /**
     * @description Checks if the user has the 'Operator' role.
     */
    function isOperator() {
      return isSignedIn() && request.auth.token.role == 'Operator';
    }

    /**
     * @description Checks if the document exists and the user is the owner.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates a profile with matching ID.
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all user documents.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId); // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages master data for paper types; accessible only to admins.
     * @path /paperTypes/{paperTypeId}
     * @allow (create) Admin creates a new paper type.
     * @deny (update) Non-admin user tries to modify a paper type.
     * @principle Restricts master data management to admins.
     */
    match /paperTypes/{paperTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages master data for item types; accessible only to admins.
     * @path /itemTypes/{itemTypeId}
     * @allow (create) Admin creates a new item type.
     * @deny (update) Non-admin user tries to modify an item type.
     * @principle Restricts master data management to admins.
     */
    match /itemTypes/{itemTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages stock information; accessible only to admins.
     * @path /stock/{stockId}
     * @allow (create) Admin creates a new stock entry.
     * @deny (update) Non-admin user tries to modify stock information.
     * @principle Restricts stock management to admins.
     */
    match /stock/{stockId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages program information; accessible to admins and members.
     * @path /programs/{programId}
     * @allow (create) Admin or Member creates a new program.
     * @deny (update) Non-admin user tries to modify program information.
     * @principle Restricts program management to admins and members.
     */
    match /programs/{programId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin() || isMember();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages reel ruling entries; accessible to admins and operators.
     * @path /reels/{reelRulingId}
     * @allow (create) Admin or Operator creates a new reel ruling entry.
     * @deny (update) Non-admin user tries to modify reel ruling information.
     * @principle Restricts reel ruling management to admins and operators.
     */
    match /reels/{reelRulingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin() || isOperator();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages reports; accessible to admins and members.
     * @path /reports/{reportId}
     * @allow (get) Admin or Member can get a report.
     * @deny (create) Non-admin user tries to create a report.
     * @principle Restricts report management to admins and members.
     */
    match /reports/{reportId} {
      allow get: if true;
      allow list: if isAdmin() || isMember();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}