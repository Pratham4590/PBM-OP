/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only the authenticated user can access their own profile.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types; accessible to all authenticated users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types; accessible to all authenticated users.
 * - /stock/{stockId}: Stores stock information; only accessible to admin users.
 * - /programs/{programId}: Stores program information; accessible to all authenticated users.
 * - /reels/{reelRulingId}: Stores reel ruling entries; accessible to all authenticated users.
 * - /reports/{reportId}: Stores generated reports; accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disabled for security.
 * - Data validation is limited to relational integrity and authorization fields for rapid prototyping.
 * - Read access is generally open to authenticated users unless restricted by role.
 * - Write access is restricted based on roles or ownership.
 * - The stock collection is only accessible by admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (create) - User 'sq8MkzlQN2XSZrly4WRplcUfno72' can create their own profile if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'sq8MkzlQN2XSZrly4WRplcUfno72' can access their own profile.
     * @deny (create) - User 'sq8MkzlQN2XSZrly4WRplcUfno72' cannot create a profile with a different userId.
     * @deny (get, update, delete) - User 'otherUserId' cannot access user 'sq8MkzlQN2XSZrly4WRplcUfno72' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - All authenticated users can read paper type data.
     * @allow (create, update, delete) - No one can create, update, or delete paper types in this prototype.
     * @deny (create, update, delete) - No one can create, update, or delete paper types in this prototype.
     * @principle Public read access for paper type master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - All authenticated users can read item type data.
     * @allow (create, update, delete) - No one can create, update, or delete item types in this prototype.
     * @deny (create, update, delete) - No one can create, update, or delete item types in this prototype.
     * @principle Public read access for item type master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages stock information; only accessible and modifiable by admin users.
     * @path /stock/{stockId}
     * @allow (get, list) - Admins can read stock data.
     * @allow (create, update, delete) - Admins can modify stock data.
     * @deny (get, list) - Non-admins cannot read stock data.
     * @deny (create, update, delete) - Non-admins cannot modify stock data.
     * @principle Restricts stock data access to admin users.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages program information.
     * @path /programs/{programId}
     * @allow (get, list) - All authenticated users can read program data.
     * @allow (create, update, delete) - No one can create, update, or delete programs in this prototype.
     * @deny (create, update, delete) - No one can create, update, or delete programs in this prototype.
     * @principle Public read access for program data.
     */
    match /programs/{programId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - All authenticated users can read reel ruling data.
     * @allow (create, update, delete) - No one can create, update, or delete reel rulings in this prototype.
     * @deny (create, update, delete) - No one can create, update, or delete reel rulings in this prototype.
     * @principle Public read access for reel ruling data.
     */
    match /reels/{reelRulingId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) - All authenticated users can read report data.
     * @allow (create, update, delete) - No one can create, update, or delete reports in this prototype.
     * @deny (create, update, delete) - No one can create, update, or delete reports in this prototype.
     * @principle Public read access for report data.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}