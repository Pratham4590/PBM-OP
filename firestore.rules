/**
 * @file Firebase Security Rules for Notebook Manufacturing App
 *
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing application.
 * All data is organized into top-level collections representing entities like users, paper types, item types, stock, programs, reel rulings, and reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access restricted to the user themselves.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types; publicly readable.
 * - /itemTypes/{itemTypeId}: Stores master data for item types; publicly readable.
 * - /stock/{stockId}: Stores stock information; only accessible and modifiable by admin users.
 * - /programs/{programId}: Stores program information; (potentially) includes a `members` map for collaborative access.
 * - /reels/{reelRulingId}: Stores reel ruling entries; (potentially) includes a denormalized program `members` map for collaborative access.
 * - /reports/{reportId}: Stores generated reports; access restricted to admins or members included in related reel rulings.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the authenticated user.
 * - PaperType and ItemType master data are publicly readable.
 * - Stock data is restricted to admin users only.
 * - Programs and ReelRulings can be collaborative, with access controlled by a `members` map on the document.
 * - Public listing is allowed for PaperType and ItemType.
 * - All other collections require authentication for listing.
 *
 * Denormalization for Authorization:
 * - To avoid `get()` calls, roles are stored directly in the `/users/{userId}` document, and access control lists (`members` map) are denormalized into `/programs/{programId}` and `/reels/{reelRulingId}` documents when collaboration is extended.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) - Authenticated user can access, update, or delete their own profile.
     * @deny (create) - User cannot create a profile with an ID that does not match their UID.
     * @deny (get, update, delete) - User cannot access, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Manages paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Anyone can read paper types.
     * @deny (create, update, delete) - No one can create, update, or delete paper types (admin only, to be implemented).
     * @principle Provides public read access to master data; restricts write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to admin role when implemented.
    }

    /**
     * @description Manages item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Anyone can read item types.
     * @deny (create, update, delete) - No one can create, update, or delete item types.
     * @principle Provides public read access to master data; restricts write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to admin role when implemented.
    }

    /**
     * @description Manages stock information.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) - Only accessible and modifiable by admin users (to be implemented).
     * @principle Restricts access to stock data to admin users.
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if false; // TODO: Restrict to admin role when implemented.
    }

    /**
     * @description Manages program information.
     * @path /programs/{programId}
     * @allow (get, list) - If the user is in the member list, they can read the document.
     * @allow (create) - If the user is the owner, they can create a program document
     * @allow (update, delete) - If the user is the owner, they can update and delete the program document.
     * @deny (create, update, delete) - If the user isn't the owner, they cannot create, update or delete the document.
     * @principle Implements shared access for programs using a members map.
     */
    match /programs/{programId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCollaborator(program) {
            return isSignedIn() && program.data.members[request.auth.uid] != null;
        }

        function isOwner(program) {
            return isSignedIn() && program.data.members[request.auth.uid] == 'owner';
        }

        function isExistingOwner(programId) {
            return isSignedIn() && existsAfter(/databases/$(database)/documents/programs/$(programId)) && get(/databases/$(database)/documents/programs/$(programId)).data.members[request.auth.uid] == 'owner';
        }
        allow get: if isCollaborator(resource);
        allow list: if isSignedIn(); //Anyone can list, collaboration is managed using the "get" rule.
        allow create: if isSignedIn() && request.resource.data.members[request.auth.uid] == 'owner';
        allow update: if isOwner(resource) && isExistingOwner(programId);
        allow delete: if isOwner(resource) && isExistingOwner(programId);
    }

    /**
     * @description Manages reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - If the user is in the program member list (denormalized), they can read the document.
     * @allow (create) - If the user is in the program member list (denormalized) AND the program exists, they can create a reel ruling.
     * @allow (update, delete) - If the user is the owner of the program (denormalized), they can update and delete the reel ruling.
     * @deny (create, update, delete) - If the user isn't a member of the associated program or the program doesn't exist, they cannot create, update or delete the document.
     * @principle Implements shared access for reel rulings based on program membership.
     */
    match /reels/{reelRulingId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isCollaborator(reelRuling) {
            return isSignedIn() && reelRuling.data.programMembers[request.auth.uid] != null;
        }

        function isOwner(reelRuling) {
            return isSignedIn() && reelRuling.data.programMembers[request.auth.uid] == 'owner';
        }

        function isExistingOwner(reelRulingId) {
            return isSignedIn() && existsAfter(/databases/$(database)/documents/reels/$(reelRulingId)) && get(/databases/$(database)/documents/reels/$(reelRulingId)).data.programMembers[request.auth.uid] == 'owner';
        }

        allow get: if isCollaborator(resource);
        allow list: if isSignedIn(); //Anyone can list, collaboration is managed using the "get" rule.
        allow create: if isSignedIn() && request.resource.data.programMembers[request.auth.uid] != null;
        allow update: if isOwner(resource) && isExistingOwner(reelRulingId);
        allow delete: if isOwner(resource) && isExistingOwner(reelRulingId);
    }

    /**
     * @description Manages generated reports.
     * @path /reports/{reportId}
     * @deny (get, list, create, update, delete) - Only accessible and modifiable by admin users (to be implemented).
     * @principle Restricts access to report data to admin users.
     */
    match /reports/{reportId} {
        allow get, list, create, update, delete: if false; // TODO: Restrict to admin role when implemented.
    }
  }
}