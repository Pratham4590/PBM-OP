/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /paper_types: Stores paper types. Accessible to authenticated users.
 * - /item_types: Stores item types. Accessible to authenticated users.
 * - /stock: Stores stock data. Only accessible to authenticated users.
 * - /programs: Stores program data. Accessible to authenticated users.
 * - /reels: Stores reel data. Accessible to authenticated users.
 * - /users: Stores user profiles. Accessible only to admins.
 *
 * Key Security Decisions:
 * - Only admins can create, update, or delete user profiles.
 * - Public read access is not permitted on any collection. All reads require authentication.
 * - Data validation is relaxed to facilitate rapid prototyping, focusing on access control.
 *
 * Access Control:
 * - paper_types: Authenticated users can create.
 * - item_types: Authenticated users can create.
 * - stock: Authenticated users can create.
 * - programs: Authenticated users can create.
 * - reels: Authenticated users can create.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Manages paper types, including name, GSM, and length.
     * @path /databases/{database}/documents/paper_types
     * @allow (create) Authenticated user can create a new paper type.
     * @deny (create) Unauthenticated user cannot create a paper type.
     * @principle Authenticated users can create paper types.
     */
    match /paper_types/{paperTypeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages item types, including item name and short code.
     * @path /databases/{database}/documents/item_types
     * @allow (create) Authenticated user can create a new item type.
     * @deny (create) Unauthenticated user cannot create an item type.
     * @principle Authenticated users can create item types.
     */
    match /item_types/{itemTypeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages stock levels of different paper types.
     * @path /databases/{database}/documents/stock
     * @allow (create) Authenticated user can create a new stock entry.
     * @deny (create) Unauthenticated user cannot create a stock entry.
     * @principle Authenticated users can create stock entries.
     */
    match /stock/{stockId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages program information.
     * @path /databases/{database}/documents/programs
     * @allow (create) Authenticated user can create a new program entry.
     * @deny (create) Unauthenticated user cannot create a program entry.
     * @principle Authenticated users can create program entries.
     */
    match /programs/{programId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages reel ruling entries.
     * @path /databases/{database}/documents/reels
     * @allow (create) Authenticated user can create a new reel entry.
     * @deny (create) Unauthenticated user cannot create a reel entry.
     * @principle Authenticated users can create reel entries.
     */
    match /reels/{reelId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profiles.
     * @path /databases/{database}/documents/users
     * @allow (create) Admins can create user profiles.
     * @deny (create) Non-admins cannot create user profiles.
     * @principle Only admins can manage user profiles.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}