/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership, role-based, and shared-access control models to protect data.
 * User-specific data under `/users/{userId}` is strictly controlled by the owning user.
 * Master data under `/masterData` is generally publicly readable but admin-writeable.
 * Production programs and reel rulings under `/programs` and `/reels` respectively are publicly readable, but they need owner validation for write.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /masterData/paperTypes/{paperTypeId}: Master data for paper types, publicly readable, but write access should have owner validation.
 * - /masterData/itemTypes/{itemTypeId}: Master data for item types, publicly readable, but write access should have owner validation.
 * - /stock/{stockId}: Stock information, write access should have owner validation.
 * - /programs/{programId}: Production program details. publicly readable, but write access should have owner validation.
 * - /reels/{reelRulingId}: Reel ruling entries, publicly readable, but write access should have owner validation.
 * - /reports/{reportId}: Reports summarizing reel ruling data, publicly readable, but write access should have owner validation.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent unauthorized enumeration of user accounts.
 * - Master data (paper types, item types) is publicly readable to facilitate application functionality.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Read access can be public only if the schema and documented intent allow. Write access must always be validated.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `users/{userId}` document, eliminating the need for separate role lookups.
 *
 * Structural Segregation:
 * - Publicly readable data (master data) is stored in separate collections from user-specific data to simplify rules and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the user to read and write their own data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching UID.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure paper type master data.
     * @path /masterData/paperTypes/{paperTypeId}
     * @allow (get, list) - Any user can read paper types.
     * @allow (create, update, delete) - Only authenticated users with valid permission can modify paper types.
     * @deny (create, update, delete) - Unauthenticated users cannot modify paper types.
     * @principle Public read, owner-only writes with verified ownership field.
     */
    match /masterData/paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Owner validation will need to be added when schema is finalized
    }

    /**
     * @description Secure item type master data.
     * @path /masterData/itemTypes/{itemTypeId}
     * @allow (get, list) - Any user can read item types.
     * @allow (create, update, delete) - Only authenticated users with valid permission can modify item types.
     * @deny (create, update, delete) - Unauthenticated users cannot modify item types.
     * @principle Public read, owner-only writes with verified ownership field.
     */
    match /masterData/itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Owner validation will need to be added when schema is finalized
    }

    /**
     * @description Secure stock information.
     * @path /stock/{stockId}
     * @allow (get, list) - Any user can read stock information.
     * @allow (create, update, delete) - Only authenticated users with valid permission can modify stock information.
     * @deny (create, update, delete) - Unauthenticated users cannot modify stock information.
     * @principle Public read, owner-only writes with verified ownership field.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Owner validation will need to be added when schema is finalized
    }

    /**
     * @description Secure program information.
     * @path /programs/{programId}
     * @allow (get, list) - Any user can read program information.
     * @allow (create, update, delete) - Only authenticated users with valid permission can modify program information.
     * @deny (create, update, delete) - Unauthenticated users cannot modify program information.
     * @principle Public read, owner-only writes with verified ownership field.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Owner validation will need to be added when schema is finalized
    }

    /**
     * @description Secure reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Any user can read reel ruling entries.
     * @allow (create, update, delete) - Only authenticated users with valid permission can modify reel ruling entries.
     * @deny (create, update, delete) - Unauthenticated users cannot modify reel ruling entries.
     * @principle Public read, owner-only writes with verified ownership field.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Owner validation will need to be added when schema is finalized
    }

    /**
     * @description Secure reports summarizing reel ruling data.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user can read reports.
     * @allow (create, update, delete) - Only authenticated users with valid permission can modify reports.
     * @deny (create, update, delete) - Unauthenticated users cannot modify reports.
     * @principle Public read, owner-only writes with verified ownership field.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth != null; // Owner validation will need to be added when schema is finalized
    }
  }
}