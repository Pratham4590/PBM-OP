/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for a notebook manufacturing application.
 *
 * Core Philosophy:
 *  - Authenticated users can read most data.
 *  - Administrative roles are required to create or modify certain data (e.g., stock).
 *  - Data access is controlled at the collection level based on user roles.
 *
 * Data Structure:
 *  - `/users/{userId}`: Stores user profiles. User ID must match the authenticated user's UID.
 *  - `/paperTypes/{paperTypeId}`: Stores master data for paper types.
 *  - `/itemTypes/{itemTypeId}`: Stores master data for item types.
 *  - `/stock/{stockId}`: Stores stock information. Only accessible and modifiable by admins.
 *  - `/programs/{programId}`: Stores program information. Accessible and modifiable by admins and members.
 *  - `/reels/{reelRulingId}`: Stores reel ruling entries. Accessible and modifiable by admins, members, and operators.
 *  - `/reports/{reportId}`: Stores generated reports. Accessible by all authenticated users.
 *
 * Key Security Decisions:
 *  - Listing of users is not explicitly allowed, but individual user profiles are readable by authenticated users.
 *  - The rules do not enforce a strict schema for most data writes, allowing for rapid prototyping.
 *  - All write operations are protected by authorization checks to prevent unauthorized data modification.
 *
 * Denormalization for Authorization:
 *  - User roles are checked directly via `request.auth.token.role`, avoiding the need for `get()` calls to a separate user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user has the specified role.
     * @param {string} role The role to check for (e.g., 'admin', 'member').
     */
    function userHasRole(role) {
      return isSignedIn() && request.auth.token.role == role;
    }

    /**
     * @description Allows the owner to read their data
     * @param {string} userId The uid of the user
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if a document exists and the current user is the owner.
     * @param {string} userId The UID of the user.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile with matching user ID.
     * @allow (get, list) Authenticated user reads their own profile.
     * @allow (update) Authenticated user updates their own profile, or an admin updates any profile.
     * @deny (create) Unauthorized user attempts to create a profile with a mismatched user ID.
     * @deny (delete) No user can delete a profile via rules (deletion should be handled via Firebase Auth).
     * @principle Enforces document ownership for writes and allows read access to the owner.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing users is generally not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || userHasRole('admin');
      allow delete: if false;
    }

    /**
     * @description Rules for paper types master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any authenticated user can read paper types.
     * @deny (create, update, delete) Only admins can create, update, or delete paper types.
     * @principle Public read access with admin-only writes.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if userHasRole('admin');
    }

    /**
     * @description Rules for item types master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any authenticated user can read item types.
     * @deny (create, update, delete) Only admins can create, update, or delete item types.
     * @principle Public read access with admin-only writes.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if userHasRole('admin');
    }

    /**
     * @description Rules for stock information.
     * @path /stock/{stockId}
     * @allow (get, list) Any authenticated user can read stock information.
     * @deny (create, update, delete) Only admins can create, update, or delete stock information.
     * @principle Public read access with admin-only writes.
     */
    match /stock/{stockId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if userHasRole('admin');
    }

    /**
     * @description Rules for program information.
     * @path /programs/{programId}
     * @allow (get, list) Any authenticated user can read program information.
     * @deny (create, update, delete) Only admins and members can create, update, or delete program information.
     * @principle Public read access with role-based writes.
     */
    match /programs/{programId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if userHasRole('admin') || userHasRole('member');
    }

    /**
     * @description Rules for reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any authenticated user can read reel ruling entries.
     * @deny (create, update, delete) Only admins, members, and operators can create, update, or delete reel ruling entries.
     * @principle Public read access with role-based writes.
     */
    match /reels/{reelRulingId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if userHasRole('admin') || userHasRole('member') || userHasRole('operator');
    }

    /**
     * @description Rules for generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) Any authenticated user can read generated reports.
     * @deny (create, update, delete) Only admins can create, update, or delete generated reports.
     * @principle Public read access with admin-only writes.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if userHasRole('admin');
    }
  }
}