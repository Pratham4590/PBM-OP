/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control. User data under `/users/{userId}` is strictly controlled by the user.
 * Other collections can be read publicly but are restricted to owner-only writes.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles. Access is limited to the authenticated user.
 * - `/paperTypes/{paperTypeId}`: Stores master data for paper types. Publicly readable.
 * - `/itemTypes/{itemTypeId}`: Stores master data for item types. Publicly readable.
 * - `/stock/{stockId}`: Stores stock information. Publicly readable.
 * - `/programs/{programId}`: Stores program information. Publicly readable.
 * - `/reels/{reelRulingId}`: Stores reel ruling entries. Publicly readable.
 * - `/reports/{reportId}`: Stores generated reports. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents under `/users/{userId}`.
 * - Listing user documents is disallowed.
 * - Master data collections (`paperTypes`, `itemTypes`) are publicly readable.
 * - Stock, Programs, Reels, and Reports are publicly readable, but writes are not restricted because the document schemas are missing an owner ID.
 *
 * Denormalization for Authorization:
 *  None used in this version.
 *
 * Structural Segregation:
 *  User profiles are stored in a dedicated collection (`/users/{userId}`) to enforce strict ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'user123' with UID 'user123' can create their profile.
     * @allow (get, update, delete) - User 'user123' with UID 'user123' can get, update, and delete their profile.
     * @deny (create) - User 'user456' with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User 'user456' with UID 'user456' cannot get, update, or delete the profile of user 'user123'.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages paper type master data. Currently allows public read access.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any user, signed in or not, can read paper type information.
     * @deny (create, update, delete) - No one can create, update, or delete paper type information.
     * @principle Provides public read access to master data; restricts write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages item type master data. Currently allows public read access.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any user, signed in or not, can read item type information.
     * @deny (create, update, delete) - No one can create, update, or delete item type information.
     * @principle Provides public read access to master data; restricts write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages stock data. Currently allows public read access. Write access is not restricted because the document schemas are missing an owner ID.
     * @path /stock/{stockId}
     * @allow (get, list) - Any user, signed in or not, can read stock information.
     * @deny (create, update, delete) - No one can create, update, or delete stock information.
     * @principle Provides public read access to stock data; restricts write access.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages program data. Currently allows public read access. Write access is not restricted because the document schemas are missing an owner ID.
     * @path /programs/{programId}
     * @allow (get, list) - Any user, signed in or not, can read program information.
     * @deny (create, update, delete) - No one can create, update, or delete program information.
     * @principle Provides public read access to program data; restricts write access.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages reel ruling data. Currently allows public read access. Write access is not restricted because the document schemas are missing an owner ID.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Any user, signed in or not, can read reel ruling information.
     * @deny (create, update, delete) - No one can create, update, or delete reel ruling information.
     * @principle Provides public read access to reel ruling data; restricts write access.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages report data. Currently allows public read access. Write access is not restricted because the document schemas are missing an owner ID.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user, signed in or not, can read report information.
     * @deny (create, update, delete) - No one can create, update, or delete report information.
     * @principle Provides public read access to report data; restricts write access.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}