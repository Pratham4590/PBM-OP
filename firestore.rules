/**
 * @file Firestore Security Rules for Notebook Manufacturing App
 * @description This ruleset enforces a strict user-ownership model for user profiles and role-based access control for other data entities.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /paperTypes/{paperTypeId}: Master data for paper types, publicly readable.
 * - /itemTypes/{itemTypeId}: Master data for item types, publicly readable.
 * - /stock/{stockId}: Stock information, accessible only to admins.
 * - /programs/{programId}: Program information.
 * - /reels/{reelRulingId}: Reel ruling entries.
 * - /reports/{reportId}: Generated reports.
 *
 * Key Security Decisions:
 * - User profiles are private and accessible only to the owning user.
 * - Listing users is disallowed.
 * - Master data (paperTypes, itemTypes) is publicly readable.
 * - Stock information is restricted to admin users.
 * - All write operations require authentication.
 * - Data validation is limited to ownership and relational integrity checks during create and update operations.
 * - The rules prioritize security and assume a flexible data shape for rapid iteration.
 *
 * Denormalization for Authorization:
 * - The rules avoid `get()` calls by relying on denormalized data where possible. For instance, user roles are stored directly in the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile.
     * @allow (get, update, delete) - Authenticated user accesses their profile.
     * @deny (create) - Unauthenticated user tries to create a profile.
     * @deny (get, update, delete) - Authenticated user tries to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to paper types.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Anyone can read paper types.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete paper types.
     * @principle Allows public read access with owner-only writes.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to item types.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Anyone can read item types.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete item types.
     * @principle Allows public read access with owner-only writes.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts stock access to admin users.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) - Only admin users can access stock data.
     * @principle Enforces role-based access control for sensitive data.
     */
    match /stock/{stockId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && request.auth.token.role == 'Admin';
        }

        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to program data.
     * @path /programs/{programId}
     * @allow (get, list, create, update, delete) - Only authenticated users can access programs.
     * @principle Enforces authentication for all operations.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get, list, create, update, delete) - Only authenticated users can access reel rulings.
     * @principle Enforces authentication for all operations.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) - Only authenticated users can access reports.
     * @principle Enforces authentication for all operations.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
    
  }
}