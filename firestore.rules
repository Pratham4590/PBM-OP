/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model. User roles (admin, member, operator) are stored
 * directly in the `/users/{userId}` document. Access to other collections is granted based on these roles.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, including roles. User ID matches Firebase Auth UID.
 * - `/paperTypes/{paperTypeId}`: Stores master data for paper types.
 * - `/itemTypes/{itemTypeId}`: Stores master data for item types.
 * - `/stock/{stockId}`: Stores stock information; only accessible by admins.
 * - `/programs/{programId}`: Stores program information.
 * - `/reels/{reelRulingId}`: Stores reel ruling entries.
 * - `/reports/{reportId}`: Stores generated reports.
 *
 * Key Security Decisions:
 * - Roles are read from /users/{userId} using the `get()` function.
 * - Only signed-in users can access the application, deny any unauthenticated user request.
 * - Stock data is restricted to admin users only.
 * - All `update` and `delete` operations must verify that the document exists.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Gets the role of the current user from their user document.
     * @return {string} The role of the user (admin, member, operator), or an empty string if not found.
     */
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && getRole() == "admin";
    }

    /**
     * @description Checks if the current user has the 'member' role.
     * @return {boolean} True if the user is a member, false otherwise.
     */
    function isMember() {
      return isSignedIn() && getRole() == "member";
    }

    /**
     * @description Checks if the current user has the 'operator' role.
     * @return {boolean} True if the user is an operator, false otherwise.
     */
    function isOperator() {
      return isSignedIn() && getRole() == "operator";
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document (and that the document exists).
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile if their auth UID matches the document ID.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete their own profile.
     * @deny (create) User 'user_xyz' cannot create a profile with the ID 'user_abc'.
     * @deny (get, update, delete) User 'user_xyz' cannot read, update, or delete User 'user_abc's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /paperTypes/{paperTypeId} collection.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any signed-in user can read the paper types.
     * @deny (create, update, delete) No one can create, update or delete paper types (only backend scripts).
     * @principle Restricts write access to paper types.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /itemTypes/{itemTypeId} collection.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any signed-in user can read the item types.
     * @deny (create, update, delete) No one can create, update, or delete item types (only backend scripts).
     * @principle Restricts write access to item types.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /stock/{stockId} collection.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) Only admin users can manage stock.
     * @deny (get, list, create, update, delete) Non-admin users cannot manage stock.
     * @principle Restricts stock management to admins only.
     */
    match /stock/{stockId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /programs/{programId} collection.
     * @path /programs/{programId}
     * @allow (get, list) Any signed-in user can read the programs.
     * @allow (create, update, delete) Only admin, member or operator users can manage programs.
     * @principle Restricts write access to programs.
     */
    match /programs/{programId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isMember() || isOperator());
    }

    /**
     * @description Rules for the /reels/{reelRulingId} collection.
     * @path /reels/{reelRulingId}
     * @allow (read, list) Any signed-in user can read reels.
     * @allow (create, update) Only admin, member or operator users can create or update reels.
     * @allow (delete) Only admin or member users can delete reels.
     * @principle Restricts write access to reels based on roles.
     */
    match /reels/{reelRulingId} {
      allow read, list: if isSignedIn();
      allow create, update: if isSignedIn() && (isAdmin() || isMember() || isOperator());
      allow delete: if isSignedIn() && (isAdmin() || isMember()) && resource != null;
    }

    /**
     * @description Rules for the /reports/{reportId} collection.
     * @path /reports/{reportId}
     * @allow (get, list) Any signed-in user can read the reports.
     * @allow (create, update, delete) Only admin users can manage reports.
     * @principle Restricts write access to reports.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // Deny all other requests by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}