/**
 * @file Overview
 * This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user themselves.
 * - /paperTypes/{paperTypeId}: Paper type master data, writeable by anyone.
 * - /itemTypes/{itemTypeId}: Item type master data, writeable by anyone.
 * - /stock/{stockId}: Stock information, accessible only by authorized users.
 * - /programs/{programId}: Production program data.
 * - /reels/{reelRulingId}: Reel ruling data.
 * - /reports/{reportId}: Generated reports.
 *
 * Key Security Decisions:
 * - User data is strictly owned by the user.
 * - Listing users is disallowed.
 * - Assumes that itemTypes and PaperTypes are master data managed internally, without strict control.
 * - Denormalization is used to embed authorization data directly within documents, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'sq8MkzlQN2XSZrly4WRplcUfno72' can create their own profile.
     * @deny (create) User 'sq8MkzlQN2XSZrly4WRplcUfno72' cannot create another user's profile.
     * @allow (get) User 'sq8MkzlQN2XSZrly4WRplcUfno72' can read their own profile.
     * @deny (get) User 'sq8MkzlQN2XSZrly4WRplcUfno72' cannot read another user's profile.
     * @allow (update) User 'sq8MkzlQN2XSZrly4WRplcUfno72' can update their own profile.
     * @deny (update) User 'sq8MkzlQN2XSZrly4WRplcUfno72' cannot update another user's profile.
     * @allow (delete) User 'sq8MkzlQN2XSZrly4WRplcUfno72' can delete their own profile.
     * @deny (delete) User 'sq8MkzlQN2XSZrly4WRplcUfno72' cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows read and write access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (create) Any user can create a paper type.
     * @allow (get) Any user can read a paper type.
     * @allow (list) Any user can list paper types.
     * @allow (update) Any user can update a paper type.
     * @allow (delete) Any user can delete a paper type.
     * @principle Allows public read and write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows read and write access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (create) Any user can create an item type.
     * @allow (get) Any user can read an item type.
     * @allow (list) Any user can list item types.
     * @allow (update) Any user can update an item type.
     * @allow (delete) Any user can delete an item type.
     * @principle Allows public read and write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows read and write access to stock data for authorized users.
     * @path /stock/{stockId}
     * @allow (create) Any user can create a stock entry.
     * @allow (get) Any user can read a stock entry.
     * @allow (list) Any user can list stock entries.
     * @allow (update) Any user can update a stock entry.
     * @allow (delete) Any user can delete a stock entry.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows read and write access to program data.
     * @path /programs/{programId}
     * @allow (create) Any user can create a program.
     * @allow (get) Any user can read a program.
     * @allow (list) Any user can list programs.
     * @allow (update) Any user can update a program.
     * @allow (delete) Any user can delete a program.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows read and write access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (create) Any user can create a reel ruling.
     * @allow (get) Any user can read a reel ruling.
     * @allow (list) Any user can list reel rulings.
     * @allow (update) Any user can update a reel ruling.
     * @allow (delete) Any user can delete a reel ruling.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows read and write access to report data.
     * @path /reports/{reportId}
     * @allow (create) Any user can create a report.
     * @allow (get) Any user can read a report.
     * @allow (list) Any user can list reports.
     * @allow (update) Any user can update a report.
     * @allow (delete) Any user can delete a report.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }
}