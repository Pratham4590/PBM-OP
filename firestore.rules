/**
 * @file Firebase Security Rules for Notebook Manufacturing App
 *
 * @description This ruleset enforces a role-based access control model with owner-only access for user data.
 * Master data collections (`paperTypes`, `itemTypes`) are publicly readable but only modifiable by admins.
 * Stock data is also restricted to admin-only access.
 * `programs`, `reels`, and `reports` are publicly readable, but require the user's UID to match the ownership field on create.
 * Updates and deletes to `programs`, `reels`, and `reports` require the user to match the existing `ownerId` field.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profiles, accessible only to the owning user and admins.
 * - `/paperTypes/{paperTypeId}`: Stores master paper type data, publicly readable, admin-writeable.
 * - `/itemTypes/{itemTypeId}`: Stores master item type data, publicly readable, admin-writeable.
 * - `/stock/{stockId}`: Stores stock data, accessible only to admins.
 * - `/programs/{programId}`: Stores production program data, publicly readable, owner-writeable.
 * - `/reels/{reelRulingId}`: Stores reel ruling data, publicly readable, owner-writeable.
 * - `/reports/{reportId}`: Stores reports, publicly readable, owner-writeable.
 *
 * @keySecurityDecisions
 * - User listing is disallowed to prevent unauthorized data access.
 * - All write operations on user data require authentication.
 * - Master data (`paperTypes`, `itemTypes`) is publicly readable to allow easy access for all users.
 * - `programs`, `reels`, and `reports` use a public-read, owner-write pattern, requiring an `ownerId` field.
 *
 * @denormalizationForAuthorization
 * To avoid costly `get()` calls, the `programs` and `reels` documents should include a denormalized members map, with userIds as the key.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write their own data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only signed-in users can create a user document for themselves.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures paper type master data, allowing anyone to read but only admins to write.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts write access to admins for master data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secures item type master data, allowing anyone to read but only admins to write.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts write access to admins for master data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secures stock data, allowing only admins to read and write.
     * @path /stock/{stockId}
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts access to admins for sensitive stock data.
     */
    match /stock/{stockId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secures program data, allowing anyone to read but only the owner to write.
     * @path /programs/{programId}
     * @allow (get, list) if true
     * @allow (create) if request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if resource.data.authorId == request.auth.uid
     * @deny (create) if request.resource.data.authorId != request.auth.uid
     * @deny (update, delete) if resource.data.authorId != request.auth.uid
     * @principle Enforces document ownership for writes.
     */
    match /programs/{programId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
        allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secures reel ruling data, allowing anyone to read but only the owner to write.
     * @path /reels/{reelRulingId}
     * @allow (get, list) if true
     * @allow (create) if request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if resource.data.authorId == request.auth.uid
     * @deny (create) if request.resource.data.authorId != request.auth.uid
     * @deny (update, delete) if resource.data.authorId != request.auth.uid
     * @principle Enforces document ownership for writes.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secures report data, allowing anyone to read but only the owner to write.
     * @path /reports/{reportId}
     * @allow (get, list) if true
     * @allow (create) if request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if resource.data.authorId == request.auth.uid
     * @deny (create) if request.resource.data.authorId != request.auth.uid
     * @deny (update, delete) if resource.data.authorId != request.auth.uid
     * @principle Enforces document ownership for writes.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Checks if the user is the owner of the existing document.
  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }

  // Checks if the user has the 'admin' role.
  function isAdmin() {
    return request.auth.token.role == 'admin';
  }
}