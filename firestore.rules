/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control. User data under `/users/{userId}` is strictly controlled by the user. Data at the top level collections (`/paperTypes`, `/itemTypes`, `/stock`, `/programs`, `/reels`, `/reports`) is governed either by public read with owner-only write, or role-based access (admin-only).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only by the user themselves.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types. Publicly readable, admin-only writable.
 * - /itemTypes/{itemTypeId}: Stores master data for item types. Publicly readable, admin-only writable.
 * - /stock/{stockId}: Stores stock information. Admin-only access.
 * - /programs/{programId}: Stores program information. Publicly readable, admin-only writable.
 * - /reels/{reelRulingId}: Stores reel ruling entries. Publicly readable, admin-only writable.
 * - /reports/{reportId}: Stores generated reports. Publicly readable, admin-only writable.
 *
 * Key Security Decisions:
 * - Listing of all users is disallowed.
 * - Admin role is required for modifying stock information.
 * - Public read access is granted to master data and reports, but write access is restricted to admins.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (get, list, update, delete) User with UID 'user_abc' cannot read, update, or delete the profile of user 'user_xyz' at /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows public read access and admin-only write access for paper types.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read paper type data.
     * @allow (create, update, delete) Only admin users can create, update, or delete paper type data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete paper type data.
     * @principle Restricts write access to admins while allowing public reads.
     */
    match /paperTypes/{paperTypeId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access and admin-only write access for item types.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read item type data.
     * @allow (create, update, delete) Only admin users can create, update, or delete item type data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete item type data.
     * @principle Restricts write access to admins while allowing public reads.
     */
    match /itemTypes/{itemTypeId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to stock information to admin users only.
     * @path /stock/{stockId}
     * @allow (create, get, list, update, delete) Only admin users can create, read, update, or delete stock data.
     * @deny (create, get, list, update, delete) Non-admin users cannot create, read, update, or delete stock data.
     * @principle Restricts all access to admins.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access and admin-only write access for programs.
     * @path /programs/{programId}
     * @allow (get, list) Any user can read program data.
     * @allow (create, update, delete) Only admin users can create, update, or delete program data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete program data.
     * @principle Restricts write access to admins while allowing public reads.
     */
    match /programs/{programId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access and admin-only write access for reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any user can read reel ruling data.
     * @allow (create, update, delete) Only admin users can create, update, or delete reel ruling data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete reel ruling data.
     * @principle Restricts write access to admins while allowing public reads.
     */
    match /reels/{reelRulingId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access and admin-only write access for reports.
     * @path /reports/{reportId}
     * @allow (get, list) Any user can read report data.
     * @allow (create, update, delete) Only admin users can create, update, or delete report data.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete report data.
     * @principle Restricts write access to admins while allowing public reads.
     */
    match /reports/{reportId} {
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}