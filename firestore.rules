/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of role-based access control and ownership-based access.
 * User data is secured using an ownership model, while master data (paper types, item types, stock)
 * is generally read-only or restricted to admin users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user and admins.
 * - /paperTypes/{paperTypeId}: Stores paper type master data, publicly readable but write-protected.
 * - /itemTypes/{itemTypeId}: Stores item type master data, publicly readable but write-protected.
 * - /stock/{stockId}: Stores stock information, only accessible and modifiable by admins.
 * - /programs/{programId}: Stores program information. If collaboration is enabled (not in the current IR), access will be controlled by a denormalized `members` map on the document.
 * - /reels/{reelRulingId}: Stores reel ruling entries. If collaboration is enabled (not in the current IR), access will be controlled by a denormalized `members` map on the document.
 * - /reports/{reportId}: Stores generated reports, accessible to admins or the report creator.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Listing of users is not allowed.
 * - PaperType and ItemType data are publicly readable but cannot be created, updated, or deleted.
 * - Stock data is restricted to admin users.
 * - If collaboration is enabled for Programs and Reels, a `members` map is REQUIRED.
 *
 * Denormalization for Authorization:
 * - (Hypothetical: If collaboration is enabled): Programs and Reels will use a `members` map to store user roles,
 *   avoiding the need for `get()` calls to a separate membership collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owning user to read/write their data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile (userId matches auth.uid).
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own profile (userId matches auth.uid).
     * @deny (create) - Authenticated user attempts to create a profile with a userId that doesn't match their own.
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete another user's profile.
     * @deny (list) - Listing all users is not permitted.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures paper type master data, allowing public read access but denying all write access.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any user can read paper type information.
     * @deny (create, update, delete) - No user can create, update, or delete paper type information.
     * @principle Provides public read access for master data while preventing unauthorized modifications.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures item type master data, allowing public read access but denying all write access.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any user can read item type information.
     * @deny (create, update, delete) - No user can create, update, or delete item type information.
     * @principle Provides public read access for master data while preventing unauthorized modifications.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures stock information, allowing only authenticated users with 'Admin' role to manage stock.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) - Only users with the 'Admin' role can access and modify stock information.
     * @deny (get, list, create, update, delete) - Users without the 'Admin' role cannot access or modify stock information.
     * @principle Restricts access to sensitive stock data based on user roles.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secures program information, allowing only authenticated users to read/write program data. If collaboration is enabled via a members map, it will be enforced here.
     * @path /programs/{programId}
     * @allow (get, list, create, update, delete) - Only authenticated users can access and modify program information. If collaboration is enabled, checks for membership.
     * @deny (get, list, create, update, delete) - Users who are not authenticated or not members of the program cannot access or modify the program information.
     * @principle Restricts access to program data based on user roles or membership.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures reel ruling entries, allowing only authenticated users to manage reel rulings. If collaboration is enabled via a members map, it will be enforced here.
     * @path /reels/{reelRulingId}
     * @allow (get, list, create, update, delete) - Only authenticated users can access and modify reel ruling entries. If collaboration is enabled, checks for membership.
     * @deny (get, list, create, update, delete) - Users who are not authenticated or not members of the reel ruling cannot access or modify the reel ruling entries.
     * @principle Restricts access to reel ruling data based on user roles or membership.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures generated reports, allowing only authenticated users to manage reports.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) - Only authenticated users can access and modify reports.
     * @deny (get, list, create, update, delete) - Users who are not authenticated cannot access or modify reports.
     * @principle Restricts access to report data based on user roles or membership.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}