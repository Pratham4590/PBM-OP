/**
 * @fileOverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a role-based access control model for all other data.
 * Data is segregated to simplify rules and improve clarity.
 * All writes are protected by authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types. Read-only for all authenticated users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types. Read-only for all authenticated users.
 * - /stock/{stockId}: Stores stock information, accessible only to admin users.
 * - /programs/{programId}: Stores program information. Accessible to all authenticated users, and writeable only by admins.
 * - /reels/{reelRulingId}: Stores reel ruling entries. Accessible to all authenticated users, and writeable only by admins.
 * - /reports/{reportId}: Stores generated reports. Accessible to all authenticated users, and writeable only by admins.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owner.
 * - Listing of user profiles is disallowed.
 * - Master data (paperTypes, itemTypes) is publicly readable but not writable.
 * - Stock, Programs, Reels, and Reports are accessible and modifiable by admin users only.
 *
 * Denormalization for Authorization:
 * - The `users/{userId}` document contains the user's role, avoiding the need for additional reads to determine authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'test_user' can create their own profile.
     *   Request: auth.uid = 'test_user', resource.data.id = 'test_user'
     * @allow (get, update, delete) User with ID 'test_user' can read, update, and delete their own profile.
     *   Request: auth.uid = 'test_user'
     * @deny (create) User with ID 'test_user' cannot create a profile with a mismatched ID.
     *   Request: auth.uid = 'test_user', resource.data.id = 'another_user'
     * @deny (get, update, delete) User with ID 'another_user' cannot read, update, or delete the profile of user 'test_user'.
     *   Request: auth.uid = 'another_user'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Enforce immutability of the userId field
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type documents.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any authenticated user can read paper type information.
     * @deny (create, update, delete) No one can create, update, or delete paper types.
     * @principle Allows public read access to paper type data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type documents.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any authenticated user can read item type information.
     * @deny (create, update, delete) No one can create, update, or delete item types.
     * @principle Allows public read access to item type data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock documents.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) Only admin users can manage stock information.
     * @deny (get, list, create, update, delete) Non-admin users cannot access or modify stock data.
     * @principle Restricts stock management to admin users.
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to program documents.
     * @path /programs/{programId}
     * @allow (get, list) Any authenticated user can read program information.
     * @allow (create, update, delete) Only admin users can create, update, or delete programs.
     * @deny (get, list, create, update, delete) Non-admin users cannot access or modify program data.
     * @principle Restricts program management to admin users.
     */
    match /programs/{programId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to reel ruling documents.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any authenticated user can read reel ruling information.
     * @allow (create, update, delete) Only admin users can create, update, or delete reel rulings.
     * @deny (get, list, create, update, delete) Non-admin users cannot access or modify reel ruling data.
     * @principle Restricts reel ruling management to admin users.
     */
    match /reels/{reelRulingId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to report documents.
     * @path /reports/{reportId}
     * @allow (get, list) Any authenticated user can read report information.
     * @allow (create, update, delete) Only admin users can create, update, or delete reports.
     * @deny (get, list, create, update, delete) Non-admin users cannot access or modify report data.
     * @principle Restricts report management to admin users.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Helper functions ---

    // Check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if the user has the 'Admin' role.
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'Admin';
    }
  }
}