rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.  Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the authenticated user's UID matches the {userId} path segment.
     * @deny (get, create, update, delete) if the authenticated user is not signed in, or if the UID does not match the {userId} path segment.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the resource and if the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      // Allow the user to create their own profile, but only if the userId matches their auth uid
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow the user to update their own profile, but prevent changing the userId.
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to paper type information, but restricts creation, update, and deletion to authenticated admins.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to authenticated admins.
     * @deny (create, update, delete) to non-admin users.
     * @principle Implements public read access with restricted write access for admin users.
     */
    match /paperTypes/{paperTypeId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to item type information, but restricts creation, update, and deletion to authenticated admins.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to authenticated admins.
     * @deny (create, update, delete) to non-admin users.
     * @principle Implements public read access with restricted write access for admin users.
     */
    match /itemTypes/{itemTypeId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to stock information, but restricts creation, update, and deletion to authenticated admins.
     * @path /stock/{stockId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to authenticated admins.
     * @deny (create, update, delete) to non-admin users.
     * @principle Implements public read access with restricted write access for admin users.
     */
    match /stock/{stockId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages access to program information.  Allows public read access, but restricts creation, update and deletion.
     * If collaboration is implemented, members can update.
     * @path /programs/{programId}
     */
    match /programs/{programId} {
       // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      // Helper function to check if the user is a member of the program.
      function isMember(programId) {
          return request.auth != null && resource.data.members[request.auth.uid] != null;
      }
      allow get, list: if true; // Allow public read

      allow create, update, delete: if isAdmin(); // Only admins can create programs
    }

    /**
     * @description Manages access to reel ruling entries. Allows public read access, but restricts creation, update, and deletion.
     * If collaboration on Programs and ReelRulings is required, the members map from the Program will be used.
     * @path /reels/{reelRulingId}
     */
    match /reels/{reelRulingId} {
       // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true; // Allow public read

      allow create, update, delete: if isAdmin(); // Only admins can create reel rulings
    }

    /**
     * @description Allows public read access to reports, but restricts creation, update, and deletion to authenticated admins.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
       // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}