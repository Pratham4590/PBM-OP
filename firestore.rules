/**
 * @fileoverview Firestore Security Rules for Production Monitoring Application
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to master data while restricting modifications to authorized users.
 *
 * Data Structure:
 * - Users: Each user has a profile stored under `/users/{userId}`.
 * - Master Data: Paper types and item types are stored under `/paperTypes/{paperTypeId}` and `/itemTypes/{itemTypeId}`, respectively.  These are readable by all but only writable by authorized users (currently everyone who is signed in).
 * - Production Data: Reels, programs, rulings, and stock information are stored under `/reels/{reelId}`, `/programs/{programId}`, `/rulings/{rulingId}`, and `/stock/{stockId}`, respectively, and are writable by authorized users.
 * - Status Logs: Status logs are stored under `/statusLogs/{statusLogId}` and are writable by authorized users.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document.
 * - Listing of users is disallowed.
 * - Master data (paperTypes, itemTypes) is publicly readable but only writable by authenticated users.
 * - Production data (reels, programs, rulings) is writable by authenticated users.
 *
 * Denormalization for Authorization: N/A
 * No denormalization is explicitly used in this ruleset. More sophisticated access control might require denormalization.
 *
 * Structural Segregation: N/A
 * There is no segregation of public/private data in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - User can only access their own profile.
     * @deny (create) - User cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile if the userId matches their auth UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // Allow the user to get their own profile.
      allow get: if isOwner(userId);
      // Allow the user to update their own profile, ensuring the ID remains consistent.
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      // Allow the user to delete their own profile if it exists.
      allow delete: if isOwner(userId) && resource != null;
      // Do not allow listing of users.
      allow list: if false;
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Anyone can read paper type information.
     * @allow (create, update, delete) - Only authenticated users can modify paper type information.
     * @deny (create, update, delete) - Unauthenticated users cannot modify paper type information.
     * @principle Allows public read access to master data with restricted write access.
     */
    match /paperTypes/{paperTypeId} {
      // Allow anyone to read paper type information.
      allow get, list: if true;
      // Allow only authenticated users to create, update, or delete paper types.
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Anyone can read item type information.
     * @allow (create, update, delete) - Only authenticated users can modify item type information.
     * @deny (create, update, delete) - Unauthenticated users cannot modify item type information.
     * @principle Allows public read access to master data with restricted write access.
     */
    match /itemTypes/{itemTypeId} {
      // Allow anyone to read item type information.
      allow get, list: if true;
      // Allow only authenticated users to create, update, or delete item types.
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to reel stock information.
     * @path /reels/{reelId}
     * @allow (get, list) - Anyone can read reel stock information.
     * @allow (create, update, delete) - Only authenticated users can modify reel stock information.
     * @deny (create, update, delete) - Unauthenticated users cannot modify reel stock information.
     * @principle Allows public read access to reel data with restricted write access.
     */
    match /reels/{reelId} {
      // Allow anyone to read reel stock information.
      allow get, list: if true;
      // Allow only authenticated users to create, update, or delete reels.
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to production program definitions.
     * @path /programs/{programId}
     * @allow (get, list) - Anyone can read program definitions.
     * @allow (create, update, delete) - Only authenticated users can modify program definitions.
     * @deny (create, update, delete) - Unauthenticated users cannot modify program definitions.
     * @principle Allows public read access to program data with restricted write access.
     */
    match /programs/{programId} {
      // Allow anyone to read program definitions.
      allow get, list: if true;
      // Allow only authenticated users to create, update, or delete programs.
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to ruling entries for each reel.
     * @path /rulings/{rulingId}
     * @allow (get, list) - Anyone can read ruling entries.
     * @allow (create, update, delete) - Only authenticated users can modify ruling entries.
     * @deny (create, update, delete) - Unauthenticated users cannot modify ruling entries.
     * @principle Allows public read access to ruling data with restricted write access.
     */
    match /rulings/{rulingId} {
      // Allow anyone to read ruling entries.
      allow get, list: if true;
      // Allow only authenticated users to create, update, or delete rulings.
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to aggregated stock levels for each paper type.
     * @path /stock/{stockId}
     * @allow (get, list) - Anyone can read stock levels.
     * @allow (create, update, delete) - Only authenticated users can modify stock levels.
     * @deny (create, update, delete) - Unauthenticated users cannot modify stock levels.
     * @principle Allows public read access to stock data with restricted write access.
     */
    match /stock/{stockId} {
      // Allow anyone to read stock levels.
      allow get, list: if true;
      // Allow only authenticated users to create, update, or delete stock information.
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to the log of manual reel status changes by admins.
     * @path /statusLogs/{statusLogId}
     * @allow (get, list) - Anyone can read the status logs.
     * @allow (create, update, delete) - Only authenticated users can create status logs. Updates and deletes are disallowed, as logs should be immutable.
     * @deny (update, delete) - Status logs should not be updated or deleted.
     * @deny (create, update, delete) - Unauthenticated users cannot modify status logs.
     * @principle Allows public read access to status log data with restricted write access, while preventing modification of existing logs.
     */
    match /statusLogs/{statusLogId} {
      // Allow anyone to read status logs.
      allow get, list: if true;
      // Allow only authenticated users to create status logs.
      allow create: if isSignedIn();
      // Prevent updating or deleting status logs.
      allow update, delete: if false;
    }

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}