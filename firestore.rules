/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control. User data is strictly controlled by the owning user, while stock information is limited to admin users. All write operations are guarded by authentication checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves for modification.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types.
 * - /itemTypes/{itemTypeId}: Stores master data for item types.
 * - /stock/{stockId}: Stores stock information, accessible and modifiable only by admin users.
 * - /programs/{programId}: Stores program information.
 * - /reels/{reelRulingId}: Stores reel ruling entries.
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the absence of a top-level `list` rule on `/users`.
 * - The `stock` collection is strictly limited to admin access.
 * - Data validation is minimal in this prototyping phase, focusing on authorization and relational integrity.
 * - To avoid `get()` calls in security rules, authorization independence is ensured through denormalization of data where necessary. For example, if collaboration features were to be enabled, the `members` map would be denormalized into Program documents to avoid extra reads.
 * - All write operations require a verified user identity (request.auth != null).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the user can modify their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'sq8MkzlQN2XSZrly4WRplcUfno72' can create their own user document with matching UID.
     * @allow (get, update, delete) - User 'sq8MkzlQN2XSZrly4WRplcUfno72' can read, update, and delete their own user document.
     * @deny (create, update, delete) - User 'anotherUser' cannot create, update, or delete user 'sq8MkzlQN2XSZrly4WRplcUfno72's document.
     * @principle Enforces document ownership for writes and reads, restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any user can read paper type information.
     * @deny (create, update, delete) - No user can create, update, or delete paper type information.
     * @principle Public read access with no write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any user can read item type information.
     * @deny (create, update, delete) - No user can create, update, or delete item type information.
     * @principle Public read access with no write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages stock data, restricted to admin users.
     * @path /stock/{stockId}
     * @allow (get, list) - Any user can read stock information.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete stock information.
     * @principle Role-based access control, restricts access to admin users.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages program data.
     * @path /programs/{programId}
     * @allow (get, list) - Any user can read program information.
     * @deny (create, update, delete) - No user can create, update, or delete program information.
     * @principle Public read access with no write access.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Any user can read reel ruling information.
     * @deny (create, update, delete) - No user can create, update, or delete reel ruling information.
     * @principle Public read access with no write access.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages report data.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user can read report information.
     * @deny (create, update, delete) - No user can create, update, or delete report information.
     * @principle Public read access with no write access.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}