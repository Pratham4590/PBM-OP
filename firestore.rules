/**
 * @file This Firestore Security Rules file enforces a strict user-ownership model for user profiles
 *       and role-based access control for other collections related to notebook manufacturing.
 *       It prioritizes authorization independence by denormalizing authorization data directly
 *       into the documents being secured, thus avoiding costly and potentially insecure `get()` calls.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal user data, combined with role-based access for other data.
 * The design avoids complex queries within security rules by denormalizing data to allow simpler access checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user profiles, accessible only by the owning user.
 * - /paperTypes/{paperTypeId}: Stores paper types.
 * - /itemTypes/{itemTypeId}: Stores item types.
 * - /stock/{stockId}: Stores stock information.
 * - /programs/{programId}: Stores program information.
 * - /reels/{reelRulingId}: Stores reel ruling entries.
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned and controlled by each user.
 * - Data validation is relaxed to allow for rapid prototyping and iteration.
 * - Role-based access is not implemented in this version, but it will be important for admin related data like stock.
 * - To create simpler, more performant rules, always denormalize (copy) data required for an authorization decision directly onto the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, or delete their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read paper types, but restricts creation, updates, and deletion.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user, authenticated or not, can read paper type information.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete paper types (but only if roles are implemented).
     * @principle Public read access with restricted write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read item types, but restricts creation, updates, and deletion.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user, authenticated or not, can read item type information.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete item types (but only if roles are implemented).
     * @principle Public read access with restricted write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to stock information. Only authenticated users can read, create, update or delete stock entries.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) Any unauthenticated user cannot read, create, update, or delete stock information.
     * @principle Restricts write access.
     */
    match /stock/{stockId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read program information, but restricts creation, updates, and deletion.
     * @path /programs/{programId}
     * @allow (get, list) Any user, authenticated or not, can read program information.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete program information (but only if roles are implemented).
     * @principle Public read access with restricted write access.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read reel ruling entries, but restricts creation, updates, and deletion.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any user, authenticated or not, can read reel ruling entries.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete reel ruling entries (but only if roles are implemented).
     * @principle Public read access with restricted write access.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read reports, but restricts creation, updates, and deletion.
     * @path /reports/{reportId}
     * @allow (get, list) Any user, authenticated or not, can read reports.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete reports (but only if roles are implemented).
     * @principle Public read access with restricted write access.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}