/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing application.
 *
 * Core Philosophy:
 * Access is primarily controlled through user roles (Admin, Member, Operator) and ownership.
 * Admin users have full access. Other roles have restricted access based on collection.
 * User documents are secured via owner-only access.
 * Public read access is generally disallowed unless specifically noted for a collection.
 *
 * Data Structure:
 * /users/{userId}: Stores user profiles.
 * /paperTypes/{paperTypeId}: Stores master data for paper types.
 * /itemTypes/{itemTypeId}: Stores master data for item types.
 * /stock/{stockId}: Stores stock information (Admin-only).
 * /programs/{programId}: Stores program information.
 * /reels/{reelRulingId}: Stores reel ruling entries.
 * /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Stock information is restricted to admin users only.
 * - No public read access is granted by default.
 *
 * Denormalization for Authorization:
 * User roles are stored directly in the `users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile document at /users/user456.
     * @deny (update, delete) - User with UID 'user123' cannot update or delete another user's profile document at /users/user456.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile. The ID in the document must match their UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to read, update, and delete their own profile.
      allow get, update, delete: if isOwner(userId) && resource.data.id == userId;

      // Prevent listing of all users.
      allow list: if false;
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any signed-in user can read paper type data.
     * @deny (create, update, delete) - Only admin users can modify paper type data.
     * @principle Restricts modification of master data to administrators.
     */
    match /paperTypes/{paperTypeId} {
      // Helper function to check if the user has the "admin" role.
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      // Allow any signed-in user to read paper type data.
      allow get, list: if isSignedIn();

      // Only allow admin users to create, update, and delete paper type data.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any signed-in user can read item type data.
     * @deny (create, update, delete) - Only admin users can modify item type data.
     * @principle Restricts modification of master data to administrators.
     */
    match /itemTypes/{itemTypeId} {
      // Helper function to check if the user has the "admin" role.
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      // Allow any signed-in user to read item type data.
      allow get, list: if isSignedIn();

      // Only allow admin users to create, update, and delete item type data.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to stock data.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) - Only admin users can access stock data.
     * @principle Restricts access to sensitive stock information to administrators only.
     */
    match /stock/{stockId} {
      // Helper function to check if the user has the "admin" role.
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      // Only allow admin users to create, update, and delete stock data.
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to program data.
     * @path /programs/{programId}
     * @allow (get, list) - Any signed-in user can read program data.
     * @deny (create, update, delete) - Only admin users can modify program data.
     * @principle Restricts modification of program data to administrators.
     */
    match /programs/{programId} {
      // Helper function to check if the user has the "admin" role.
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      // Allow any signed-in user to read program data.
      allow get, list: if isSignedIn();

      // Only allow admin users to create, update, and delete program data.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to reel ruling data.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Any signed-in user can read reel ruling data.
     * @deny (create, update, delete) - Only admin users can modify reel ruling data.
     * @principle Restricts modification of reel ruling data to administrators.
     */
    match /reels/{reelRulingId} {
      // Helper function to check if the user has the "admin" role.
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      // Allow any signed-in user to read reel ruling data.
      allow get, list: if isSignedIn();

      // Only allow admin users to create, update, and delete reel ruling data.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     * @allow (get, list) - Any signed-in user can read report data.
     * @deny (create, update, delete) - Only admin users can modify report data.
     * @principle Restricts modification of report data to administrators.
     */
    match /reports/{reportId} {
      // Helper function to check if the user has the "admin" role.
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'Admin';
      }

      // Allow any signed-in user to read report data.
      allow get, list: if isSignedIn();

      // Only allow admin users to create, update, and delete report data.
      allow create, update, delete: if isAdmin();
    }

    // Helper function to determine if a user is signed in
    function isSignedIn() {
        return request.auth != null;
    }
  }
}