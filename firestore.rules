/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /paperTypes/{paperTypeId}: Public read access, write access restricted to authenticated users with "Admin" role.
 * - /itemTypes/{itemTypeId}: Public read access, write access restricted to authenticated users with "Admin" role.
 * - /stock/{stockId}: Write access restricted to authenticated users with "Admin" role.
 * - /programs/{programId}: Write access restricted to authenticated users with "Admin" role.
 * - /reels/{reelRulingId}: Write access restricted to authenticated users with "Admin" role.
 * - /reports/{reportId}: Write access restricted to authenticated users with "Admin" role.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Listing of user documents is disallowed.
 * - Master data (paperTypes, itemTypes) is publicly readable but only modifiable by admins.
 * - Stock, Programs, ReelRulings and Reports are only accessible to admin users.
 * - Data validation is limited to authorization-critical fields to enable rapid prototyping.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the /users/{userId} document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && (request.auth.token.role == 'Admin');
    }
    
    /**
     * @description Enforces user-only access to their profile data.
     * @path /users/{userId}
     * @allow (create) User with ID "user123" can create their profile.
     * @deny (create) User with ID "user123" cannot create profile with ID "user456".
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to paper types, write access restricted to admins.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Anyone can read paper type data.
     * @allow (create) Admin user can create new paper types.
     * @deny (create) Non-admin user cannot create new paper types.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to item types, write access restricted to admins.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Anyone can read item type data.
     * @allow (create) Admin user can create new item types.
     * @deny (create) Non-admin user cannot create new item types.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to stock information to admins.
     * @path /stock/{stockId}
     * @allow (create) Admin user can create new stock entries.
     * @deny (delete) Non-admin user cannot delete stock entries.
     * @principle Restricts access to stock information to admins.
     */
    match /stock/{stockId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to program information to admins.
     * @path /programs/{programId}
     * @allow (create) Admin user can create new program entries.
     * @deny (delete) Non-admin user cannot delete program entries.
     * @principle Restricts access to program information to admins.
     */
    match /programs/{programId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to reel ruling information to admins.
     * @path /reels/{reelRulingId}
     * @allow (create) Admin user can create new reel ruling entries.
     * @deny (delete) Non-admin user cannot delete reel ruling entries.
     * @principle Restricts access to reel ruling information to admins.
     */
    match /reels/{reelRulingId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts write access to report information to admins.
     * @path /reports/{reportId}
     * @allow (create) Admin user can create new report entries.
     * @deny (delete) Non-admin user cannot delete report entries.
     * @principle Restricts access to report information to admins.
     */
    match /reports/{reportId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}