/**
 * @fileoverview Firestore Security Rules for Paper Reel Management App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model. Admins have full access,
 * while other users have read-only access to most collections.
 * User-specific data is stored under the `/users/{userId}` path and is only accessible
 * by the owning user.
 *
 * Data Structure:
 * - `/paper_types`: Stores paper type definitions.
 * - `/item_types`: Stores item type definitions.
 * - `/stock`: Stores stock information.
 * - `/programs`: Stores program information.
 * - `/reels`: Stores reel information.
 * - `/users/{userId}`: Stores user-specific data.
 *
 * Key Security Decisions:
 * - Only admins can modify stock information.
 * - Users can only read and create reels, programs, item_types, and paper_types
 * - Users can only read their own user document.
 * - Listing of the `/stock` collection is disallowed for non-admins (addresses the error reported).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Rules for the paper_types collection. Allows read access to all, restricts write access to none
     * @path /databases/{database}/documents/paper_types
     * @allow (get, list) Authenticated user can read paper types.
     * @deny (create, update, delete) No one can create, update, or delete paper types.
     * @principle Allows public read access to paper type information.
     */
    match /paper_types/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the item_types collection. Allows read access to all, restricts write access to none
     * @path /databases/{database}/documents/item_types
     * @allow (get, list) Authenticated user can read item types.
     * @deny (create, update, delete) No one can create, update, or delete item types.
     * @principle Allows public read access to item type information.
     */
    match /item_types/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the stock collection. Allows read access to all, restricts write access to admins.
     * @path /databases/{database}/documents/stock
     * @allow (get) Authenticated user can read stock.
     * @deny (list) Non-admin user can't list the stock collection.
     * @allow (create, update, delete) Only admins can modify stock information.
     * @deny (create, update, delete) Non-admins cannot write to the stock collection.
     * @principle Restricts write access to stock information to admins only.
     */
    match /stock/{stockId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the programs collection. Allows read access to all, restricts write access to none
     * @path /databases/{database}/documents/programs
     * @allow (get, list) Authenticated user can read programs.
     * @deny (create, update, delete) No one can create, update, or delete programs.
     * @principle Allows public read access to programs.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the reels collection. Allows read access to all, restricts write access to none
     * @path /databases/{database}/documents/reels
     * @allow (get, list) Authenticated user can read reels.
     * @deny (create, update, delete) No one can create, update, or delete reels.
     * @principle Allows public read access to reels.
     */
    match /reels/{reelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the users collection.  Users can read their own document.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) Authenticated user can read their own user document.
     * @deny (list, create, update, delete) Users cannot list, create, update, or delete user documents.
     * @principle Restricts access to user documents to the owning user.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create, update, delete: if false;
    }
  }
}