/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a role-based access control system with owner-only access for user data and public read access for some collections. Administrative roles have broad access to manage paper types, item types, stock, programs, reel rulings, and reports. The rules prioritize authorization independence to avoid costly `get()` calls, denormalizing membership data directly onto documents for efficient access control.
 * @data_structure The Firestore database is structured with top-level collections for paperTypes, itemTypes, stock, programs, reels, and reports. User-specific data is stored under `/users/{userId}`. Collaborative data, like Programs, may contain a `members` map for role-based access control.
 * @key_security_decisions
 *   - User data under `/users/{userId}` is strictly controlled; only the authenticated user can read or write their own data.
 *   - `list` operations on user-scoped subcollections are only allowed for the owner.
 *   - The rules explicitly deny any write operations with `if false;` if authorization cannot be determined, to ensure a secure-by-default posture.
 *   - Public read access is enabled for specific collections, but writes are restricted to specific roles or ownership.
 * @denormalization_for_authorization For collaborative documents such as programs, a `members` map is used to store user roles directly on the document to avoid `get()` calls. Example: `resource.data.members[request.auth.uid] == 'editor'`
 * @structural_segregation User-specific data is stored in a dedicated collection `/users/{userId}` to prevent accidental exposure of private information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user's ID matches the existing document's owner ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @details In a real application, this should likely read the role from the /users/{userId} document.
     *          For prototyping, we are defaulting to false and it is not possible to use this rule.
     */
    function isAdmin() {
      return false; // In a real app, check the user's role in the database.
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles; only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for paper types.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any user can read paper type information.
     * @allow (create, update, delete) - Only admin users can manage paper types.
     * @deny (create, update, delete) - Non-admin users cannot manage paper types.
     * @principle Restricts write access to paper types to admin users while allowing public read access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for item types.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any user can read item type information.
     * @allow (create, update, delete) - Only admin users can manage item types.
     * @deny (create, update, delete) - Non-admin users cannot manage item types.
     * @principle Restricts write access to item types to admin users while allowing public read access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for stock information.
     * @path /stock/{stockId}
     * @allow (create, update, delete) - Only admin users can create, update, and delete stock information.
     * @deny (create, update, delete) - Non-admin users cannot manage stock information.
     * @allow (get) - Only admin users can get stock information.
     * @deny (get) - Non-admin users cannot get stock information.
     * @allow (list) - Only admin users can list stock information.
     * @deny (list) - Non-admin users cannot list stock information.
     * @principle Restricts all access to stock information to admin users.
     */
    match /stock/{stockId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for production programs.
     * @path /programs/{programId}
     * @allow (get, list) - Any user can read program information.
     * @allow (create, update, delete) - Only admin users can manage programs.
     * @deny (create, update, delete) - Non-admin users cannot manage programs.
     * @principle Restricts write access to programs to admin users while allowing public read access.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Any user can read reel ruling entries.
     * @allow (create, update, delete) - Only admin users can manage reel ruling entries.
     * @deny (create, update, delete) - Non-admin users cannot manage reel ruling entries.
     * @principle Restricts write access to reel ruling entries to admin users while allowing public read access.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for reports.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user can read reports.
     * @allow (create, update, delete) - Only admin users can manage reports.
     * @deny (create, update, delete) - Non-admin users cannot manage reports.
     * @principle Restricts write access to reports to admin users while allowing public read access.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}