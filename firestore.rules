rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     * @allow (get) User with UID 'user123' reads their own profile.
     * @allow (update) User with UID 'user123' updates their own profile.
     * @allow (delete) User with UID 'user123' deletes their own profile.
     * @deny (create) User with UID 'user456' attempts to create a profile for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user's ID matches the requested userId
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner and the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId); // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get) Any user can read paper type data.
     * @allow (list) Any user can list paper type data.
     * @deny (create) Non-admin user tries to create a paper type.
     * @deny (update) Non-admin user tries to update a paper type.
     * @deny (delete) Non-admin user tries to delete a paper type.
     * @principle Public read access with admin-only write access.
     */
    match /paperTypes/{paperTypeId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user has the 'Admin' role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get) Any user can read item type data.
     * @allow (list) Any user can list item type data.
     * @deny (create) Non-admin user tries to create an item type.
     * @deny (update) Non-admin user tries to update an item type.
     * @deny (delete) Non-admin user tries to delete an item type.
     * @principle Public read access with admin-only write access.
     */
    match /itemTypes/{itemTypeId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user has the 'Admin' role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to stock data.
     * @path /stock/{stockId}
     * @deny (get) Non-admin user tries to read stock data.
     * @deny (list) Non-admin user tries to list stock data.
     * @allow (create) Admin user creates stock data.
     * @allow (update) Admin user updates stock data.
     * @allow (delete) Admin user deletes stock data.
     * @principle Admin-only access for stock management.
     */
    match /stock/{stockId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user has the 'Admin' role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages access to program data. Allows collaborative access via a 'members' map.
     * @path /programs/{programId}
     * @allow (create) User with UID 'user123' creates a program.
     * @allow (get) User with UID 'user123' reads a program they are a member of.
     * @allow (update) User with UID 'user123' updates a program they are a member of.
     * @allow (delete) User with UID 'user123' deletes a program they are the owner of.
     * @deny (create) User with UID 'user456' attempts to create a program without proper authorization.
     * @principle Enforces document ownership/membership for writes, shared access for reads.
     */
    match /programs/{programId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user has the 'Admin' role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
      }

       // Helper function to check if the user is a member of the program
      function isMember(program) {
        return isSignedIn() && program.data.members[request.auth.uid] != null;
      }

      // Helper function to check if the user is the owner of the program.
      function isOwner(program) {
          return isSignedIn() && program.data.members[request.auth.uid] == 'owner';
      }

       // Helper function to check if the user is the owner of the program.
      function isExistingOwner(program) {
          return isOwner(program) && exists(resource);
      }

      allow get: if isMember(resource);
      allow list: if false; // TODO: secure list operation

      allow create: if isSignedIn();
      allow update: if isMember(resource);
      allow delete: if isExistingOwner(resource);
    }

    /**
     * @description Manages access to reel ruling data, potentially linked to a program.
     * @path /reels/{reelRulingId}
     * @allow (create) User creates a reel ruling linked to a program they are a member of.
     * @allow (get) User reads a reel ruling linked to a program they are a member of.
     * @allow (update) User updates a reel ruling linked to a program they are a member of.
     * @allow (delete) User deletes a reel ruling linked to a program they are the owner of.
     * @deny (create) User attempts to create a reel ruling without authorization.
     * @principle Enforces document ownership/membership based on the linked program.
     */
    match /reels/{reelRulingId} {
        // Helper function to check if the user is signed in
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the user has the 'Admin' role.
        function isAdmin() {
          return isSignedIn() && request.auth.token.role == 'Admin';
        }

        // Helper function to check if the user is a member of the program linked to the reel ruling.
        function isMemberOfProgram() {
            if (!isSignedIn()) {
                return false;
            }

            // Fetch the reel ruling document
            return get(/databases/$(database)/documents/programs/$(request.resource.data.programId)).data.members[request.auth.uid] != null;
        }

        allow get: if isSignedIn() && get(/databases/$(database)/documents/programs/$(resource.data.programId)).data.members[request.auth.uid] != null;
        allow list: if false; // TODO: secure list operation

        allow create: if isSignedIn() && get(/databases/$(database)/documents/programs/$(request.resource.data.programId)).data.members[request.auth.uid] != null;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/programs/$(resource.data.programId)).data.members[request.auth.uid] != null;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/programs/$(resource.data.programId)).data.members[request.auth.uid] != null;
    }

    /**
     * @description Manages access to report data.
     * @path /reports/{reportId}
     * @deny (get) Non-admin user tries to read report data.
     * @deny (list) Non-admin user tries to list report data.
     * @allow (create) Admin user creates report data.
     * @allow (update) Admin user updates report data.
     * @allow (delete) Admin user deletes report data.
     * @principle Admin-only access for report management.
     */
    match /reports/{reportId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user has the 'Admin' role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}