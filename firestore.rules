/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Core Philosophy:
 * Access is governed by user roles (Admin, Member, Operator) and, where applicable, document ownership or membership in a collaborative context. The rules are designed to prevent unauthorized data access and modification, ensuring data integrity and security.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types, accessible only to admin users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types, accessible only to admin users.
 * - /stock/{stockId}: Stores stock information, accessible only to admin users.
 * - /programs/{programId}: Stores program information.
 * - /reels/{reelRulingId}: Stores reel ruling entries, accessible based on associated program membership (if collaboration is extended).
 * - /reports/{reportId}: Stores generated reports.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId} documents.
 * - Admin-only access for /paperTypes, /itemTypes, and /stock collections.
 * - The rules explicitly prevent listing of collections by unauthorized users where applicable.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` calls, authorization data (like user roles or program membership) is denormalized directly into the documents being secured. This allows for fast, simple rules based on the `request.auth.uid` and the document's data.  For example, if a program had multiple collaborators you would include a `members` map on each program doc.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if the user's UID matches the document ID.
     * @deny (create, update, delete) if the user's UID does not match the document ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows admins to manage paper types.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list, create, update, delete) if the user has the "Admin" role.
     * @deny (create, update, delete) if the user does not have the "Admin" role.
     * @principle Restricts access to admin users only.
     */
    match /paperTypes/{paperTypeId} {
        function isAdmin() {
            return request.auth.token.role == 'Admin';
        }

        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage item types.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list, create, update, delete) if the user has the "Admin" role.
     * @deny (create, update, delete) if the user does not have the "Admin" role.
     * @principle Restricts access to admin users only.
     */
    match /itemTypes/{itemTypeId} {
        function isAdmin() {
            return request.auth.token.role == 'Admin';
        }

        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage stock information.
     * @path /stock/{stockId}
     * @allow (get, list, create, update, delete) if the user has the "Admin" role.
     * @deny (create, update, delete) if the user does not have the "Admin" role.
     * @principle Restricts access to admin users only.
     */
    match /stock/{stockId} {
        function isAdmin() {
            return request.auth.token.role == 'Admin';
        }

        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows access to program information.  If programs have collaborators, you will need to update this section.
     * @path /programs/{programId}
     * @allow (get, list, create, update, delete) if the user has the "Admin" role OR is a member of the program.
     * @deny (create, update, delete) if the user does not have the "Admin" role and is not a member of the program.
     * @principle Restricts access to admin users and program members.
     */
    match /programs/{programId} {
        function isAdmin() {
            return request.auth.token.role == 'Admin';
        }

       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows access to reel ruling entries. If programs have collaborators, you will need to update this section.
     * @path /reels/{reelRulingId}
     * @allow (get, list, create, update, delete) if the user has the "Admin" role OR is a member of the associated program.
     * @deny (create, update, delete) if the user does not have the "Admin" role and is not a member of the associated program.
     * @principle Restricts access to admin users and members of the associated program.
     */
    match /reels/{reelRulingId} {
        function isAdmin() {
            return request.auth.token.role == 'Admin';
        }

       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows access to generated reports. If programs have collaborators, you will need to update this section.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) if the user has the "Admin" role OR is a member of the associated program.
     * @deny (create, update, delete) if the user does not have the "Admin" role and is not a member of the associated program.
     * @principle Restricts access to admin users and members of the associated program.
     */
    match /reports/{reportId} {
        function isAdmin() {
            return request.auth.token.role == 'Admin';
        }

       allow get, list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin() && resource != null;
       allow delete: if isAdmin() && resource != null;
    }
  }
}