/**
 * @fileOverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a role-based access control model for other collections.
 * It emphasizes authorization independence to avoid costly `get()` calls.
 * All writes are protected by authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types. Publicly readable, but only writable by admins or operators (if write permission is granted).
 * - /itemTypes/{itemTypeId}: Stores master data for item types. Publicly readable, but only writable by admins or operators (if write permission is granted).
 * - /stock/{stockId}: Stores stock information. Only accessible and modifiable by admins or operators.
 * - /programs/{programId}: Stores program information. Publicly readable, but only writable by admins or operators.
 * - /reels/{reelRulingId}: Stores reel ruling entries. Publicly readable, but only writable by admins or operators.
 * - /reports/{reportId}: Stores generated reports. Publicly readable, but only writable by admins or operators.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data required for authorization is denormalized onto documents to minimize `get()` calls and improve performance.
 * - Public read access is granted to master data collections (paperTypes, itemTypes, programs, reels, reports) to allow for easy data retrieval. However, writes are restricted to admins or operators.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId); // Enforce immutability of userId.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to paper type data, but restricts writes to authorized users.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any user (or no user) can read the list of available paper types.
     * @allow (create) - An authorized user can create paper types.
     * @deny (create) - An unauthorized user cannot create paper types.
     * @principle Allows public reads, enforces authorization for writes.
     */
    match /paperTypes/{paperTypeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Add helper function (e.g., `isAdmin()` or `isOperator()`) based on custom claims if needed.
      // For prototyping, allow any signed-in user to write.
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow update: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow delete: if isSignedIn(); // TODO: Restrict to admin/operator roles.
    }

    /**
     * @description Allows public read access to item type data, but restricts writes to authorized users.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any user can read the list of item types.
     * @allow (create) - An authorized user can create item types.
     * @deny (create) - An unauthorized user cannot create item types.
     * @principle Allows public reads, enforces authorization for writes.
     */
    match /itemTypes/{itemTypeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Add helper function (e.g., `isAdmin()` or `isOperator()`) based on custom claims if needed.
      // For prototyping, allow any signed-in user to write.
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow update: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow delete: if isSignedIn(); // TODO: Restrict to admin/operator roles.
    }

    /**
     * @description Restricts access to stock data to authorized users only.
     * @path /stock/{stockId}
     * @allow (create, update, delete) - An authorized user can manage stock data.
     * @deny (create, update, delete) - An unauthorized user cannot manage stock data.
     * @principle Enforces authorization for all operations.
     */
    match /stock/{stockId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Add helper function (e.g., `isAdmin()` or `isOperator()`) based on custom claims.
      // For prototyping, allow any signed-in user to write.
      allow get, list: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow create: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow update: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow delete: if isSignedIn();  // TODO: Restrict to admin/operator roles.
    }

    /**
     * @description Allows public read access to program data, but restricts writes to authorized users.
     * @path /programs/{programId}
     * @allow (get, list) - Any user can read the list of programs.
     * @allow (create) - An authorized user can create programs.
     * @deny (create) - An unauthorized user cannot create programs.
     * @principle Allows public reads, enforces authorization for writes.
     */
    match /programs/{programId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Add helper function (e.g., `isAdmin()` or `isOperator()`) based on custom claims if needed.
      // For prototyping, allow any signed-in user to write.
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow update: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow delete: if isSignedIn(); // TODO: Restrict to admin/operator roles.
    }

    /**
     * @description Allows public read access to reel ruling data, but restricts writes to authorized users.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Any user can read the reel ruling data.
     * @allow (create) - An authorized user can create reel ruling data.
     * @deny (create) - An unauthorized user cannot create reel ruling data.
     * @principle Allows public reads, enforces authorization for writes.
     */
    match /reels/{reelRulingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Add helper function (e.g., `isAdmin()` or `isOperator()`) based on custom claims if needed.
      // For prototyping, allow any signed-in user to write.
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow update: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow delete: if isSignedIn(); // TODO: Restrict to admin/operator roles.
    }

    /**
     * @description Allows public read access to report data, but restricts writes to authorized users.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user can read report data.
     * @allow (create) - An authorized user can create reports.
     * @deny (create) - An unauthorized user cannot create reports.
     * @principle Allows public reads, enforces authorization for writes.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Add helper function (e.g., `isAdmin()` or `isOperator()`) based on custom claims if needed.
      // For prototyping, allow any signed-in user to write.
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow update: if isSignedIn(); // TODO: Restrict to admin/operator roles.
      allow delete: if isSignedIn(); // TODO: Restrict to admin/operator roles.
    }
  }
}