/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the owning user.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types; access is restricted to admin users.
 * - /itemTypes/{itemTypeId}: Stores master data for item types; access is restricted to admin users.
 * - /stock/{stockId}: Stores stock information; access is restricted to admin users.
 * - /programs/{programId}: Stores program information; access is restricted to admin users.
 * - /reels/{reelRulingId}: Stores reel ruling entries; access is restricted to admin users.
 * - /reports/{reportId}: Stores generated reports; access is restricted to admin users.
 *
 * Key Security Decisions:
 * - All data entries, except user profiles, require admin access for write operations.
 * - User listing is disallowed.
 * - Data validation is limited to authorization-critical fields, such as ownership.
 * - Denormalization is used for role storage within user documents to avoid costly `get()` calls.
 * - Write operations are ALWAYS protected by an authorization check.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User "sq8MkzlQN2XSZrly4WRplcUfno72" can create their own profile.
     * @deny (create) User "randomId" cannot create a profile for "sq8MkzlQN2XSZrly4WRplcUfno72".
     * @allow (get, list, update, delete) User "sq8MkzlQN2XSZrly4WRplcUfno72" can access their profile.
     * @deny (get, list, update, delete) User "randomId" cannot access profile for "sq8MkzlQN2XSZrly4WRplcUfno72".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Restricts PaperType creation to authenticated users.
     * @path /paperTypes/{paperTypeId}
     * @allow (create) An admin user can create a paper type.
     * @deny (create) A non-admin user cannot create a paper type.
     * @allow (get, list) Any authenticated user can read paper types.
     * @deny (update, delete) Non-admin user cannot update or delete a paper type.
     * @principle Requires authentication for write operations.
     */
    match /paperTypes/{paperTypeId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts ItemType creation to authenticated users.
     * @path /itemTypes/{itemTypeId}
     * @allow (create) An admin user can create an item type.
     * @deny (create) A non-admin user cannot create an item type.
     * @allow (get, list) Any authenticated user can read item types.
     * @deny (update, delete) Non-admin user cannot update or delete an item type.
     * @principle Requires authentication for write operations.
     */
    match /itemTypes/{itemTypeId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts Stock creation to authenticated users.
     * @path /stock/{stockId}
     * @allow (create) An admin user can create a stock entry.
     * @deny (create) A non-admin user cannot create a stock entry.
     * @allow (get, list) Any authenticated user can read stock entries.
     * @deny (update, delete) Non-admin user cannot update or delete a stock entry.
     * @principle Requires authentication for write operations.
     */
    match /stock/{stockId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts Program creation to authenticated users.
     * @path /programs/{programId}
     * @allow (create) An admin user can create a program.
     * @deny (create) A non-admin user cannot create a program.
     * @allow (get, list) Any authenticated user can read programs.
     * @deny (update, delete) Non-admin user cannot update or delete a program.
     * @principle Requires authentication for write operations.
     */
    match /programs/{programId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts ReelRuling creation to authenticated users.
     * @path /reels/{reelRulingId}
     * @allow (create) An admin user can create a reel ruling.
     * @deny (create) A non-admin user cannot create a reel ruling.
     * @allow (get, list) Any authenticated user can read reel rulings.
     * @deny (update, delete) Non-admin user cannot update or delete a reel ruling.
     * @principle Requires authentication for write operations.
     */
    match /reels/{reelRulingId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts Report creation to authenticated users.
     * @path /reports/{reportId}
     * @allow (create) An admin user can create a report.
     * @deny (create) A non-admin user cannot create a report.
     * @allow (get, list) Any authenticated user can read reports.
     * @deny (update, delete) Non-admin user cannot update or delete a report.
     * @principle Requires authentication for write operations.
     */
    match /reports/{reportId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}