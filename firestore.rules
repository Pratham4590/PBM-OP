/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for a notebook manufacturing unit application.
 *
 * Core Philosophy:
 * The security model is based on a combination of user-ownership and role-based access control.
 * - Users can create and manage their own user profiles in `/users/{userId}`.
 * - Admin and member roles, stored in the user profile, grant broader access to manage stock, programs, and other master data.
 * - Operators have read-only access, plus limited write access to reels and reports.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles with role information.
 * - `/paperTypes/{paperTypeId}`: Stores master data for paper types.
 * - `/itemTypes/{itemTypeId}`: Stores master data for item types.
 * - `/stock/{stockId}`: Stores stock information.
 * - `/programs/{programId}`: Stores program information.
 * - `/reels/{reelRulingId}`: Stores reel ruling entries.
 * - `/reports/{reportId}`: Stores generated reports.
 *
 * Key Security Decisions:
 * - Users can only create their own profile on first sign-in.
 * - Admin and member roles are required for managing stock, paper types, item types and programs.
 * - Operators have limited write access to /reels and /reports.
 * - Data validation is relaxed during prototyping to allow for rapid iteration, except for enforcing path-based ownership and role-based access.
 * - List operations are secured to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `/users/{userId}` document to avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to create their own profile and read/update their own data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (read, update) - Authenticated user reads/updates their own profile with matching userId.
     * @deny (create, read, update, delete) - Unauthenticated user tries to access this path.
     * @deny (create) - Authenticated user tries to create a profile with a mismatched userId.
     * @deny (read, update, delete) - Authenticated user tries to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update: if isSignedIn() && isOwner(userId);
      allow list, delete: if false;
    }

    /**
     * @description Allows read access to authenticated users and write access to admins/members.
     * @path /stock/{docId}
     * @allow (read, list) - Authenticated user reads/lists stock data.
     * @allow (create, update, delete) - Admin/member creates/updates/deletes stock data.
     * @deny (create, update, delete) - Non-admin/member tries to write stock data.
     * @principle Restricts write access based on user role.
     */
    match /stock/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isMember();
    }

    /**
     * @description Allows read access to authenticated users and write access to admins/members.
     * @path /paperTypes/{docId}
     * @allow (read, list) - Authenticated user reads/lists paper types.
     * @allow (create, update, delete) - Admin/member creates/updates/deletes paper types.
     * @deny (create, update, delete) - Non-admin/member tries to write paper types.
     * @principle Restricts write access based on user role.
     */
    match /paperTypes/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isMember();
    }

    /**
     * @description Allows read access to authenticated users and write access to admins/members.
     * @path /itemTypes/{docId}
     * @allow (read, list) - Authenticated user reads/lists item types.
     * @allow (create, update, delete) - Admin/member creates/updates/deletes item types.
     * @deny (create, update, delete) - Non-admin/member tries to write item types.
     * @principle Restricts write access based on user role.
     */
    match /itemTypes/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isMember();
    }

    /**
     * @description Allows read access to authenticated users and write access to admins/members.
     * @path /programs/{docId}
     * @allow (read, list) - Authenticated user reads/lists programs.
     * @allow (create, update, delete) - Admin/member creates/updates/deletes programs.
     * @deny (create, update, delete) - Non-admin/member tries to write programs.
     * @principle Restricts write access based on user role.
     */
    match /programs/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isMember();
    }

    /**
     * @description Allows read access to authenticated users and write access to admins/members/operators.
     * @path /reels/{docId}
     * @allow (read, list) - Authenticated user reads/lists reels.
     * @allow (create, update) - Admin/member/operator creates/updates reels.
     * @allow (delete) - Admin/member deletes reels.
     * @deny (create, update) - Non-admin/member/operator tries to write reels.
     * @deny (delete) - Non-admin/member tries to delete reels.
     * @principle Restricts write access based on user role.
     */
    match /reels/{docId} {
      allow get, list: if isSignedIn();
      allow create, update: if isAdmin() || isMember() || isOperator();
      allow delete: if isAdmin() || isMember();
    }

    /**
     * @description Allows read access to authenticated users and write access to admins/members/operators.
     * @path /reports/{docId}
     * @allow (read, list) - Authenticated user reads/lists reports.
     * @allow (create, update) - Admin/member/operator creates/updates reports.
     * @allow (delete) - Admin deletes reports.
     * @deny (create, update) - Non-admin/member/operator tries to write reports.
     * @deny (delete) - Non-admin tries to delete reports.
     * @principle Restricts write access based on user role.
     */
    match /reports/{docId} {
      allow get, list: if isSignedIn();
      allow create, update: if isAdmin() || isMember() || isOperator();
      allow delete: if isAdmin();
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == "admin";
    }

    function isMember() {
      return isSignedIn() && getUserRole() == "member";
    }

    function isOperator() {
      return isSignedIn() && getUserRole() == "operator";
    }
  }
}