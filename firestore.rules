/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /paper_types: Publicly readable, owner-only writable.
 * - /item_types: Publicly readable, owner-only writable.
 * - /stock: Publicly readable, owner-only writable.
 * - /programs: Publicly readable, owner-only writable.
 * - /reels: Publicly readable, owner-only writable.
 * - /users: Only accessible by authenticated users. User documents can only be created by the user themselves and are not listable.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for privacy.
 * - Public read access is granted for certain collections, but writes are restricted to owners.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the UID matches and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for the /paper_types collection.
     * @path /databases/{database}/documents/paper_types/{paperTypeId}
     * @allow (get, list): Any user can read paper type information.
     * @allow (create): Only the authenticated user can create a new paper type entry if request.resource.data.authorId matches their uid.
     * @allow (update, delete): Only the author can update or delete a paper type entry if the document exists.
     * @deny (create): A user cannot create a paper_type if request.resource.data.authorId does not match their uid.
     * @deny (update, delete): A non-author cannot update or delete an existing paper_type.
     * @principle Allows public read access to paper types, but restricts writes to the owner.
     */
    match /paper_types/{paperTypeId} {
      allow get, list: if true;
      allow create: if request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /item_types collection.
     * @path /databases/{database}/documents/item_types/{itemTypeId}
     * @allow (get, list): Any user can read item type information.
     * @allow (create): Only the authenticated user can create a new item type entry if request.resource.data.authorId matches their uid.
     * @allow (update, delete): Only the author can update or delete an item type entry if the document exists.
     * @deny (create): A user cannot create an item_type if request.resource.data.authorId does not match their uid.
     * @deny (update, delete): A non-author cannot update or delete an existing item_type.
     * @principle Allows public read access to item types, but restricts writes to the owner.
     */
    match /item_types/{itemTypeId} {
      allow get, list: if true;
      allow create: if request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /stock collection.
     * @path /databases/{database}/documents/stock/{stockId}
     * @allow (get, list): Any user can read stock information.
     * @allow (create): Only the authenticated user can create a new stock entry if request.resource.data.authorId matches their uid.
     * @allow (update, delete): Only the author can update or delete a stock entry if the document exists.
     * @deny (create): A user cannot create a stock if request.resource.data.authorId does not match their uid.
     * @deny (update, delete): A non-author cannot update or delete an existing stock.
     * @principle Allows public read access to stock information, but restricts writes to the owner.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create: if request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /programs collection.
     * @path /databases/{database}/documents/programs/{programId}
     * @allow (get, list): Any user can read program information.
     * @allow (create): Only the authenticated user can create a new program entry if request.resource.data.authorId matches their uid.
     * @allow (update, delete): Only the author can update or delete a program entry if the document exists.
     * @deny (create): A user cannot create a program if request.resource.data.authorId does not match their uid.
     * @deny (update, delete): A non-author cannot update or delete an existing program.
     * @principle Allows public read access to program information, but restricts writes to the owner.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create: if request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /reels collection.
     * @path /databases/{database}/documents/reels/{reelId}
     * @allow (get, list): Any user can read reel information.
     * @allow (create): Only the authenticated user can create a new reel entry if request.resource.data.authorId matches their uid.
     * @allow (update, delete): Only the author can update or delete a reel entry if the document exists.
     * @deny (create): A user cannot create a reel if request.resource.data.authorId does not match their uid.
     * @deny (update, delete): A non-author cannot update or delete an existing reel.
     * @principle Allows public read access to reel information, but restricts writes to the owner.
     */
    match /reels/{reelId} {
      allow get, list: if true;
      allow create: if request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }
    
    /**
     * @description Rules for the /users collection.  Restricts listing and enforces ownership.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get): Any authenticated user can get a user document.
     * @allow (create): Only the user themselves can create their own user document.
     * @allow (update, delete): Only the user themselves can update or delete their own user document.
     * @deny (list): Listing all users is not allowed.
     * @deny (create): A user cannot create a user document with a different user ID.
     * @deny (update, delete): A non-owner cannot update or delete an existing user document.
     * @principle Enforces document ownership for writes and restricts user listing for privacy.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}