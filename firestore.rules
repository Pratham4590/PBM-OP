/**
 * @fileoverview Firestore Security Rules for the notebook manufacturing unit application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model combined with user-ownership for specific collections.
 * User documents are secured via ownership, while shared resources like programs can be accessed by members with appropriate roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the owning user.
 * - /paperTypes/{paperTypeId}: Stores public paper type definitions, readable by all, writable by none (in this prototype).
 * - /itemTypes/{itemTypeId}: Stores public item type definitions, readable by all, writable by none (in this prototype).
 * - /stock/{stockId}: Stores stock information, accessible only to authenticated users, and modifiable by none (in this prototype).
 * - /programs/{programId}: Stores production programs, accessible by none (in this prototype).
 * - /reels/{reelRulingId}: Stores reel ruling entries, accessible by none (in this prototype).
 * - /reports/{reportId}: Stores generated reports, accessible by none (in this prototype).
 *
 * Key Security Decisions:
 * - Listing of users is disallowed to prevent information disclosure.
 * - Public read access is granted to /paperTypes/ and /itemTypes/ to simplify data consumption, but write access is strictly controlled.
 * - The default security posture for /programs/, /reels/, and /reports/ is read/write deny to ensure no accidental data exposure.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `users/{userId}` document, eliminating the need for `get()` calls during authorization.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path, ensuring clear ownership and simplifying access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Each user can only access their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile document when authenticated.
     *   Request: auth.uid = 'user123', document ID = 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their profile.
     *   Request: auth.uid = 'user123', document ID = 'user123'.
     * @deny (create, get, update, delete) - User with ID 'user456' attempts to access user 'user123' profile.
     *   Request: auth.uid = 'user456', document ID = 'user123'.
     * @principle Enforces user-ownership and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Function to check if the request is made by the owner
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the request is made by an existing owner (for updates/deletes)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type documents. In this prototype, paper types are publicly readable but not writable.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Any user can read the paper types.
     * @deny (create, update, delete) - No user can create, update, or delete paper types.
     * @principle Allows public read access while restricting write access.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true; // Public read

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to item type documents. In this prototype, item types are publicly readable but not writable.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Any user can read the item types.
     * @deny (create, update, delete) - No user can create, update, or delete item types.
     * @principle Allows public read access while restricting write access.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true; // Public read

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to stock documents. In this prototype, only authenticated users can read stock, and no one can write.
     * @path /stock/{stockId}
     * @allow (get, list) - Authenticated users can read stock information.
     * @deny (create, update, delete) - No user can create, update, or delete stock information.
     * @principle Restricts write access completely in the prototype.
     */
    match /stock/{stockId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to program documents. In this prototype, no one has access.
     * @path /programs/{programId}
     * @deny (get, list, create, update, delete) - No user can access program information.
     * @principle Restricts access completely in the prototype.
     */
    match /programs/{programId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to reel ruling documents. In this prototype, no one has access.
     * @path /reels/{reelRulingId}
     * @deny (get, list, create, update, delete) - No user can access reel ruling information.
     * @principle Restricts access completely in the prototype.
     */
    match /reels/{reelRulingId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to report documents. In this prototype, no one has access.
     * @path /reports/{reportId}
     * @deny (get, list, create, update, delete) - No user can access report information.
     * @principle Restricts access completely in the prototype.
     */
    match /reports/{reportId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}