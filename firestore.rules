/**
 * @fileoverview Firestore Security Rules for the Paper Production Application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model, with specific rules
 * for ownership and data access based on user roles (Admin, Member, Operator).
 * It prioritizes secure access to user data and restricts unauthorized modifications.
 *
 * Data Structure:
 * - /paper_types: Publicly readable, writeable by authorized users.
 * - /item_types: Publicly readable, writeable by authorized users.
 * - /stock: Only readable and writeable by Admin users.
 * - /programs: Publicly readable, writeable by authorized users.
 * - /reels: Publicly readable, writeable by authorized users.
 * - /users/{userId}: User-specific data, accessible only to the owner (the user themselves).
 *
 * Key Security Decisions:
 * - Listing of users is explicitly denied to prevent information disclosure.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 *  - The `User` entity's `role` field is used for authorization decisions across different collections.
 *  - User ID is used to enforce ownership for documents under the `/users/{userId}` path.
 *
 * Structural Segregation:
 *  - No structural segregation is explicitly defined in the data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Checks if the user has the Admin role.
     * @return {boolean} True if the user has the Admin role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

     /**
     * @description Checks if the user has the Member role.
     * @return {boolean} True if the user has the Member role, false otherwise.
     */
    function isMember() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Member';
    }

     /**
     * @description Checks if the user has the Operator role.
     * @return {boolean} True if the user has the Operator role, false otherwise.
     */
    function isOperator() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Operator';
    }

    /**
     * @description Rules for the /paper_types collection.
     * @path /databases/{database}/documents/paper_types/{paperTypeId}
     * @allow (get) Authenticated user can read paper_types data.
     * @allow (list) Authenticated user can list paper_types data.
     * @allow (create) Admin can create paper_types data.
     * @allow (update) Admin can update paper_types data.
     * @allow (delete) Admin can delete paper_types data.
     * @deny (create) Non-Admin user cannot create paper_types data.
     * @deny (update) Non-Admin user cannot update paper_types data.
     * @deny (delete) Non-Admin user cannot delete paper_types data.
     * @principle Allows read access to all, but restricts write access to Admin role.
     */
    match /paper_types/{paperTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /item_types collection.
     * @path /databases/{database}/documents/item_types/{itemTypeId}
     * @allow (get) Authenticated user can read item_types data.
     * @allow (list) Authenticated user can list item_types data.
     * @allow (create) Admin can create item_types data.
     * @allow (update) Admin can update item_types data.
     * @allow (delete) Admin can delete item_types data.
     * @deny (create) Non-Admin user cannot create item_types data.
     * @deny (update) Non-Admin user cannot update item_types data.
     * @deny (delete) Non-Admin user cannot delete item_types data.
     * @principle Allows read access to all, but restricts write access to Admin role.
     */
    match /item_types/{itemTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /stock collection.
     * @path /databases/{database}/documents/stock/{stockId}
     * @allow (get) Admin can read stock data.
     * @allow (list) Admin can list stock data.
     * @allow (create) Admin can create stock data.
     * @allow (update) Admin can update stock data.
     * @allow (delete) Admin can delete stock data.
     * @deny (get) Non-Admin user cannot read stock data.
     * @deny (list) Non-Admin user cannot list stock data.
     * @deny (create) Non-Admin user cannot create stock data.
     * @deny (update) Non-Admin user cannot update stock data.
     * @deny (delete) Non-Admin user cannot delete stock data.
     * @principle Restricts all access to the Admin role.
     */
    match /stock/{stockId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /programs collection.
     * @path /databases/{database}/documents/programs/{programId}
     * @allow (get) Authenticated user can read programs data.
     * @allow (list) Authenticated user can list programs data.
     * @allow (create) Admin can create programs data.
     * @allow (update) Admin can update programs data.
     * @allow (delete) Admin can delete programs data.
     * @deny (create) Non-Admin user cannot create programs data.
     * @deny (update) Non-Admin user cannot update programs data.
     * @deny (delete) Non-Admin user cannot delete programs data.
     * @principle Allows read access to all, but restricts write access to Admin role.
     */
    match /programs/{programId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /reels collection.
     * @path /databases/{database}/documents/reels/{reelId}
     * @allow (get) Authenticated user can read reels data.
     * @allow (list) Authenticated user can list reels data.
     * @allow (create) Admin can create reels data.
     * @allow (update) Admin can update reels data.
     * @allow (delete) Admin can delete reels data.
     * @deny (create) Non-Admin user cannot create reels data.
     * @deny (update) Non-Admin user cannot update reels data.
     * @deny (delete) Non-Admin user cannot delete reels data.
     * @principle Allows read access to all, but restricts write access to Admin role.
     */
    match /reels/{reelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /users collection.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) The user can read their own user document.
     * @allow (create) The user can create their own user document.
     * @allow (update) The user can update their own user document.
     * @allow (delete) The user can delete their own user document.
     * @deny (list) Listing users is not allowed.
     * @deny (create) A user cannot create another user's document.
     * @deny (update) A user cannot update another user's document.
     * @deny (delete) A user cannot delete another user's document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}