/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a notebook manufacturing unit application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the owning user.
 * - /paperTypes/{paperTypeId}: Stores master data for paper types; publicly readable but write access is limited to admins.
 * - /itemTypes/{itemTypeId}: Stores master data for item types; publicly readable but write access is limited to admins.
 * - /stock/{stockId}: Stores stock information; access is restricted to admins.
 * - /programs/{programId}: Stores program information; access is open, with writes locked to authenticated users.
 * - /reels/{reelRulingId}: Stores reel ruling entries; access is open, with writes locked to authenticated users.
 * - /reports/{reportId}: Stores generated reports; access is open, with writes locked to authenticated users.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied. Only admins have broad access to data.
 * - Data validation is relaxed to allow for rapid prototyping, but authorization is strictly enforced.
 * - Read operations are generally open for public data, with write operations restricted to authorized users.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the /users/{userId} document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user tries to create another user's profile.
     * @deny (get, update, delete) - Authenticated user tries to access another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) - Publicly readable.
     * @deny (create, update, delete) - Write access is denied.
     * @principle Public read, no writes allowed
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) - Publicly readable.
     * @deny (create, update, delete) - Write access is denied.
     * @principle Public read, no writes allowed
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock information.
     * @path /stock/{stockId}
     * @deny (get, list, create, update, delete) - Access is denied.
     * @principle No access allowed
     */
    match /stock/{stockId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to program information.
     * @path /programs/{programId}
     * @allow (get, list) - Publicly readable.
     * @deny (create, update, delete) - Write access is denied.
     * @principle Public read, no writes allowed
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) - Publicly readable.
     * @deny (create, update, delete) - Write access is denied.
     * @principle Public read, no writes allowed
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) - Publicly readable.
     * @deny (create, update, delete) - Write access is denied.
     * @principle Public read, no writes allowed
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}