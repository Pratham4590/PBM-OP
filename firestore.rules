/**
 * @file Firestore Security Rules for Notebook Manufacturing App
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles
 * and a role-based access control model for other data, such as paper types, item types, stock,
 * programs, reel rulings, and reports. It prioritizes authorization independence
 * to avoid costly `get()` calls and ensures that all write operations are authorized.
 *
 * @data_structure
 * - `/users/{userId}`: Stores individual user profiles.
 * - `/paperTypes/{paperTypeId}`: Stores master data for paper types.
 * - `/itemTypes/{itemTypeId}`: Stores master data for item types.
 * - `/stock/{stockId}`: Stores stock information, accessible only by admin users.
 * - `/programs/{programId}`: Stores program information.
 * - `/reels/{reelRulingId}`: Stores reel ruling entries.
 * - `/reports/{reportId}`: Stores generated reports.
 *
 * @key_security_decisions
 * - User listing is disallowed for privacy.
 * - All write operations require authentication.
 * - Data validation is limited to fields critical for authorization.
 * - Admin role needed for Stock collection write operations.
 * - Denormalization will be used for collaborative data to avoid get() calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read other user profiles.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) Authenticated user cannot delete other user profiles.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to paper type master data.
     * @path /paperTypes/{paperTypeId}
     * @allow (get, list) Any user can read paper type data.
     * @deny (create, update, delete) No user can create, update, or delete paper type data.
     * @principle Restricts write access to paper type data.
     */
    match /paperTypes/{paperTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to item type master data.
     * @path /itemTypes/{itemTypeId}
     * @allow (get, list) Any user can read item type data.
     * @deny (create, update, delete) No user can create, update, or delete item type data.
     * @principle Restricts write access to item type data.
     */
    match /itemTypes/{itemTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to stock information.
     * @path /stock/{stockId}
     * @allow (get, list) Any user can read stock data.
     * @deny (create, update, delete) Only admin users can create, update, or delete stock data.
     * @principle Restricts write access to stock data to admin users.
     */
    match /stock/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to program information.
     * @path /programs/{programId}
     * @allow (get, list) Any user can read program data.
     * @deny (create, update, delete) No user can create, update, or delete program data.
     * @principle Restricts write access to program data.
     */
    match /programs/{programId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to reel ruling entries.
     * @path /reels/{reelRulingId}
     * @allow (get, list) Any user can read reel ruling data.
     * @deny (create, update, delete) No user can create, update, or delete reel ruling data.
     * @principle Restricts write access to reel ruling data.
     */
    match /reels/{reelRulingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to generated reports.
     * @path /reports/{reportId}
     * @allow (get, list) Any user can read report data.
     * @deny (create, update, delete) No user can create, update, or delete report data.
     * @principle Restricts write access to report data.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the resource.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Checks if the user is the owner of the resource and if it exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Checks if the user has the admin role.
  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'Admin';
  }
}